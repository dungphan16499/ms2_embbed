
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002890  08005260  08005260  00015260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007af0  08007af0  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08007af0  08007af0  00017af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007af8  08007af8  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007af8  08007af8  00017af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007afc  08007afc  00017afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08007b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  20000098  08007b98  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  08007b98  000206dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013647  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c05  00000000  00000000  0003370f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00036318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00037330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ef5  00000000  00000000  00038220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148db  00000000  00000000  0005b115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd970  00000000  00000000  0006f9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013d360  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000463c  00000000  00000000  0013d3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005248 	.word	0x08005248

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08005248 	.word	0x08005248

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <Buzzer_Init>:
#include "buzzer.h"
#include "tim.h"


void Buzzer_Init (void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start(&htim2,TIM_CHANNEL_1);
 800057c:	2100      	movs	r1, #0
 800057e:	4804      	ldr	r0, [pc, #16]	; (8000590 <Buzzer_Init+0x18>)
 8000580:	f003 f9e2 	bl	8003948 <HAL_TIM_OC_Start>
	HAL_TIM_PWM_Init(&htim2);
 8000584:	4802      	ldr	r0, [pc, #8]	; (8000590 <Buzzer_Init+0x18>)
 8000586:	f003 faa7 	bl	8003ad8 <HAL_TIM_PWM_Init>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	2000063c 	.word	0x2000063c

08000594 <Buzzer_Set_Freq>:

void Buzzer_Set_Freq (uint16_t freq) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]
	TIM2->PSC = ((2 * HAL_RCC_GetPCLK1Freq()) / (2 * BUZZER_VOLUME_MAX * freq)) - 1;
 800059e:	f003 f943 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 80005a2:	4603      	mov	r3, r0
 80005a4:	0059      	lsls	r1, r3, #1
 80005a6:	88fa      	ldrh	r2, [r7, #6]
 80005a8:	4613      	mov	r3, r2
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	4413      	add	r3, r2
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80005b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005b8:	3b01      	subs	r3, #1
 80005ba:	6293      	str	r3, [r2, #40]	; 0x28
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <Buzzer_Set_Volume>:

void Buzzer_Set_Volume (uint16_t volume) {
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	80fb      	strh	r3, [r7, #6]
	if (volume > BUZZER_VOLUME_MAX)
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	2b0a      	cmp	r3, #10
 80005d2:	d901      	bls.n	80005d8 <Buzzer_Set_Volume+0x14>
		volume = BUZZER_VOLUME_MAX;
 80005d4:	230a      	movs	r3, #10
 80005d6:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = volume;
 80005d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	6353      	str	r3, [r2, #52]	; 0x34
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <Buzzer_Play>:

void Buzzer_Play (uint32_t* melody, uint32_t* delays, uint16_t len) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	4613      	mov	r3, r2
 80005f8:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < len; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	e034      	b.n	800066a <Buzzer_Play+0x7e>
	  	if (melody[i] != 0) {
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	4413      	add	r3, r2
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d01b      	beq.n	8000646 <Buzzer_Play+0x5a>
	  		Buzzer_Set_Freq(melody[i]);
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	4413      	add	r3, r2
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	b29b      	uxth	r3, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffba 	bl	8000594 <Buzzer_Set_Freq>
	  		Buzzer_Set_Volume(BUZZER_VOLUME_MAX);
 8000620:	200a      	movs	r0, #10
 8000622:	f7ff ffcf 	bl	80005c4 <Buzzer_Set_Volume>
	  		HAL_Delay(1920/delays[i]);
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	4413      	add	r3, r2
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000634:	fbb2 f3f3 	udiv	r3, r2, r3
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fa6f 	bl	8001b1c <HAL_Delay>
	  		Buzzer_Set_Volume(BUZZER_VOLUME_MUTE);
 800063e:	2000      	movs	r0, #0
 8000640:	f7ff ffc0 	bl	80005c4 <Buzzer_Set_Volume>
 8000644:	e00b      	b.n	800065e <Buzzer_Play+0x72>
	  	} else HAL_Delay(1920/delays[i]);
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	4413      	add	r3, r2
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000654:	fbb2 f3f3 	udiv	r3, r2, r3
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fa5f 	bl	8001b1c <HAL_Delay>
	  	HAL_Delay(10);
 800065e:	200a      	movs	r0, #10
 8000660:	f001 fa5c 	bl	8001b1c <HAL_Delay>
	for(int i = 0; i < len; i++) {
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	3301      	adds	r3, #1
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	697a      	ldr	r2, [r7, #20]
 800066e:	429a      	cmp	r2, r3
 8000670:	dbc6      	blt.n	8000600 <Buzzer_Play+0x14>
	}
}
 8000672:	bf00      	nop
 8000674:	bf00      	nop
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <MX_GPIO_Init+0x84>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a1d      	ldr	r2, [pc, #116]	; (8000700 <MX_GPIO_Init+0x84>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_GPIO_Init+0x84>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_GPIO_Init+0x84>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a16      	ldr	r2, [pc, #88]	; (8000700 <MX_GPIO_Init+0x84>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_GPIO_Init+0x84>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_GPIO_Init+0x84>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <MX_GPIO_Init+0x84>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <MX_GPIO_Init+0x84>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_GPIO_Init+0x84>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <MX_GPIO_Init+0x84>)
 80006e0:	f043 0302 	orr.w	r3, r3, #2
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_GPIO_Init+0x84>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800

08000704 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_I2C1_Init+0x50>)
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <MX_I2C1_Init+0x54>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_I2C1_Init+0x50>)
 8000710:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_I2C1_Init+0x58>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_I2C1_Init+0x50>)
 8000722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000726:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_I2C1_Init+0x50>)
 8000742:	f001 fc91 	bl	8002068 <HAL_I2C_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800074c:	f000 fc86 	bl	800105c <Error_Handler>
  }

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200004cc 	.word	0x200004cc
 8000758:	40005400 	.word	0x40005400
 800075c:	000186a0 	.word	0x000186a0

08000760 <Set_Keyboard>:
#define ROW1 0x1E
#define ROW2 0x3D
#define ROW3 0x7B
#define ROW4 0xF7

HAL_StatusTypeDef Set_Keyboard( void ) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	71fb      	strb	r3, [r7, #7]
	uint8_t buf;

	buf=0x70;
 800076a:	2370      	movs	r3, #112	; 0x70
 800076c:	71bb      	strb	r3, [r7, #6]
	ret = PCA9538_Write_Register(KBRD_WR_ADDR, CONFIG, &buf);
 800076e:	1dbb      	adds	r3, r7, #6
 8000770:	461a      	mov	r2, r3
 8000772:	2103      	movs	r1, #3
 8000774:	20e2      	movs	r0, #226	; 0xe2
 8000776:	f000 fe8d 	bl	8001494 <PCA9538_Write_Register>
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	if( ret != HAL_OK ) {
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d003      	beq.n	800078c <Set_Keyboard+0x2c>
		UART_Transmit("Error write config\n");
 8000784:	480d      	ldr	r0, [pc, #52]	; (80007bc <Set_Keyboard+0x5c>)
 8000786:	f000 feb7 	bl	80014f8 <UART_Transmit>
		goto exit;
 800078a:	e011      	b.n	80007b0 <Set_Keyboard+0x50>
	}

	buf = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	71bb      	strb	r3, [r7, #6]
	ret = PCA9538_Write_Register(KBRD_WR_ADDR, OUTPUT_PORT, &buf);
 8000790:	1dbb      	adds	r3, r7, #6
 8000792:	461a      	mov	r2, r3
 8000794:	2101      	movs	r1, #1
 8000796:	20e2      	movs	r0, #226	; 0xe2
 8000798:	f000 fe7c 	bl	8001494 <PCA9538_Write_Register>
 800079c:	4603      	mov	r3, r0
 800079e:	71fb      	strb	r3, [r7, #7]
	if( ret != HAL_OK ) {
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d003      	beq.n	80007ae <Set_Keyboard+0x4e>
		UART_Transmit("Error write output\n");
 80007a6:	4806      	ldr	r0, [pc, #24]	; (80007c0 <Set_Keyboard+0x60>)
 80007a8:	f000 fea6 	bl	80014f8 <UART_Transmit>
 80007ac:	e000      	b.n	80007b0 <Set_Keyboard+0x50>
	}

exit:
 80007ae:	bf00      	nop
	return ret;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	08005260 	.word	0x08005260
 80007c0:	08005274 	.word	0x08005274

080007c4 <Check_Row>:

uint8_t Check_Row( uint8_t  Nrow ) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	uint8_t Nkey = 0x00;
 80007ce:	2300      	movs	r3, #0
 80007d0:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret = HAL_OK;
 80007d2:	2300      	movs	r3, #0
 80007d4:	73bb      	strb	r3, [r7, #14]
	uint8_t buf[4]={0,0,0,0};
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
	uint8_t kbd_in;

	ret = Set_Keyboard();
 80007da:	f7ff ffc1 	bl	8000760 <Set_Keyboard>
 80007de:	4603      	mov	r3, r0
 80007e0:	73bb      	strb	r3, [r7, #14]
	if( ret != HAL_OK ) {
 80007e2:	7bbb      	ldrb	r3, [r7, #14]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d002      	beq.n	80007ee <Check_Row+0x2a>
		UART_Transmit("Error write config\n");
 80007e8:	484a      	ldr	r0, [pc, #296]	; (8000914 <Check_Row+0x150>)
 80007ea:	f000 fe85 	bl	80014f8 <UART_Transmit>
	}

	buf[0] = Nrow;
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	723b      	strb	r3, [r7, #8]

	ret = PCA9538_Write_Register(KBRD_WR_ADDR, OUTPUT_PORT, buf);
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	461a      	mov	r2, r3
 80007f8:	2101      	movs	r1, #1
 80007fa:	20e2      	movs	r0, #226	; 0xe2
 80007fc:	f000 fe4a 	bl	8001494 <PCA9538_Write_Register>
 8000800:	4603      	mov	r3, r0
 8000802:	73bb      	strb	r3, [r7, #14]
	if( ret != HAL_OK ) {
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <Check_Row+0x4c>
		UART_Transmit("Error write output\n");
 800080a:	4843      	ldr	r0, [pc, #268]	; (8000918 <Check_Row+0x154>)
 800080c:	f000 fe74 	bl	80014f8 <UART_Transmit>
	}

	buf[0] = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	723b      	strb	r3, [r7, #8]
	ret = PCA9538_Read_Inputs(KBRD_RD_ADDR, buf);
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	4619      	mov	r1, r3
 800081a:	20e3      	movs	r0, #227	; 0xe3
 800081c:	f000 fe5a 	bl	80014d4 <PCA9538_Read_Inputs>
 8000820:	4603      	mov	r3, r0
 8000822:	73bb      	strb	r3, [r7, #14]
	if( ret != HAL_OK ) {
 8000824:	7bbb      	ldrb	r3, [r7, #14]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <Check_Row+0x6c>
		UART_Transmit("Read error\n");
 800082a:	483c      	ldr	r0, [pc, #240]	; (800091c <Check_Row+0x158>)
 800082c:	f000 fe64 	bl	80014f8 <UART_Transmit>
	}
	kbd_in = buf[0] & 0x70;
 8000830:	7a3b      	ldrb	r3, [r7, #8]
 8000832:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000836:	737b      	strb	r3, [r7, #13]
	Nkey = kbd_in;
 8000838:	7b7b      	ldrb	r3, [r7, #13]
 800083a:	73fb      	strb	r3, [r7, #15]
	if( kbd_in != 0x70) {
 800083c:	7b7b      	ldrb	r3, [r7, #13]
 800083e:	2b70      	cmp	r3, #112	; 0x70
 8000840:	d05e      	beq.n	8000900 <Check_Row+0x13c>
		if( !(kbd_in & 0x10) ) {
 8000842:	7b7b      	ldrb	r3, [r7, #13]
 8000844:	f003 0310 	and.w	r3, r3, #16
 8000848:	2b00      	cmp	r3, #0
 800084a:	d119      	bne.n	8000880 <Check_Row+0xbc>
			switch (Nrow) {
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	2bf7      	cmp	r3, #247	; 0xf7
 8000850:	d013      	beq.n	800087a <Check_Row+0xb6>
 8000852:	2bf7      	cmp	r3, #247	; 0xf7
 8000854:	dc15      	bgt.n	8000882 <Check_Row+0xbe>
 8000856:	2b7b      	cmp	r3, #123	; 0x7b
 8000858:	d00c      	beq.n	8000874 <Check_Row+0xb0>
 800085a:	2b7b      	cmp	r3, #123	; 0x7b
 800085c:	dc11      	bgt.n	8000882 <Check_Row+0xbe>
 800085e:	2b1e      	cmp	r3, #30
 8000860:	d002      	beq.n	8000868 <Check_Row+0xa4>
 8000862:	2b3d      	cmp	r3, #61	; 0x3d
 8000864:	d003      	beq.n	800086e <Check_Row+0xaa>
 8000866:	e00c      	b.n	8000882 <Check_Row+0xbe>
				case ROW1:
					Nkey = 0x04;
 8000868:	2304      	movs	r3, #4
 800086a:	73fb      	strb	r3, [r7, #15]
					break;
 800086c:	e009      	b.n	8000882 <Check_Row+0xbe>
				case ROW2:
					Nkey = 0x04;
 800086e:	2304      	movs	r3, #4
 8000870:	73fb      	strb	r3, [r7, #15]
					break;
 8000872:	e006      	b.n	8000882 <Check_Row+0xbe>
				case ROW3:
					Nkey = 0x04;
 8000874:	2304      	movs	r3, #4
 8000876:	73fb      	strb	r3, [r7, #15]
					break;
 8000878:	e003      	b.n	8000882 <Check_Row+0xbe>
				case ROW4:
					Nkey = 0x04;
 800087a:	2304      	movs	r3, #4
 800087c:	73fb      	strb	r3, [r7, #15]
					break;
 800087e:	e000      	b.n	8000882 <Check_Row+0xbe>
			}
		}
 8000880:	bf00      	nop
		if( !(kbd_in & 0x20) ) {
 8000882:	7b7b      	ldrb	r3, [r7, #13]
 8000884:	f003 0320 	and.w	r3, r3, #32
 8000888:	2b00      	cmp	r3, #0
 800088a:	d119      	bne.n	80008c0 <Check_Row+0xfc>
			switch (Nrow) {
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	2bf7      	cmp	r3, #247	; 0xf7
 8000890:	d013      	beq.n	80008ba <Check_Row+0xf6>
 8000892:	2bf7      	cmp	r3, #247	; 0xf7
 8000894:	dc15      	bgt.n	80008c2 <Check_Row+0xfe>
 8000896:	2b7b      	cmp	r3, #123	; 0x7b
 8000898:	d00c      	beq.n	80008b4 <Check_Row+0xf0>
 800089a:	2b7b      	cmp	r3, #123	; 0x7b
 800089c:	dc11      	bgt.n	80008c2 <Check_Row+0xfe>
 800089e:	2b1e      	cmp	r3, #30
 80008a0:	d002      	beq.n	80008a8 <Check_Row+0xe4>
 80008a2:	2b3d      	cmp	r3, #61	; 0x3d
 80008a4:	d003      	beq.n	80008ae <Check_Row+0xea>
 80008a6:	e00c      	b.n	80008c2 <Check_Row+0xfe>
				case ROW1:
					Nkey = 0x02;
 80008a8:	2302      	movs	r3, #2
 80008aa:	73fb      	strb	r3, [r7, #15]
					break;
 80008ac:	e009      	b.n	80008c2 <Check_Row+0xfe>
				case ROW2:
					Nkey = 0x02;
 80008ae:	2302      	movs	r3, #2
 80008b0:	73fb      	strb	r3, [r7, #15]
					break;
 80008b2:	e006      	b.n	80008c2 <Check_Row+0xfe>
				case ROW3:
					Nkey = 0x02;
 80008b4:	2302      	movs	r3, #2
 80008b6:	73fb      	strb	r3, [r7, #15]
					break;
 80008b8:	e003      	b.n	80008c2 <Check_Row+0xfe>
				case ROW4:
					Nkey = 0x02;
 80008ba:	2302      	movs	r3, #2
 80008bc:	73fb      	strb	r3, [r7, #15]
					break;
 80008be:	e000      	b.n	80008c2 <Check_Row+0xfe>
			}
		}
 80008c0:	bf00      	nop
		if( !(kbd_in & 0x40) ) {
 80008c2:	7b7b      	ldrb	r3, [r7, #13]
 80008c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d11c      	bne.n	8000906 <Check_Row+0x142>
			switch (Nrow) {
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	2bf7      	cmp	r3, #247	; 0xf7
 80008d0:	d013      	beq.n	80008fa <Check_Row+0x136>
 80008d2:	2bf7      	cmp	r3, #247	; 0xf7
 80008d4:	dc18      	bgt.n	8000908 <Check_Row+0x144>
 80008d6:	2b7b      	cmp	r3, #123	; 0x7b
 80008d8:	d00c      	beq.n	80008f4 <Check_Row+0x130>
 80008da:	2b7b      	cmp	r3, #123	; 0x7b
 80008dc:	dc14      	bgt.n	8000908 <Check_Row+0x144>
 80008de:	2b1e      	cmp	r3, #30
 80008e0:	d002      	beq.n	80008e8 <Check_Row+0x124>
 80008e2:	2b3d      	cmp	r3, #61	; 0x3d
 80008e4:	d003      	beq.n	80008ee <Check_Row+0x12a>
 80008e6:	e00f      	b.n	8000908 <Check_Row+0x144>
				case ROW1:
					Nkey = 0x01;
 80008e8:	2301      	movs	r3, #1
 80008ea:	73fb      	strb	r3, [r7, #15]
					break;
 80008ec:	e00c      	b.n	8000908 <Check_Row+0x144>
				case ROW2:
					Nkey = 0x01;
 80008ee:	2301      	movs	r3, #1
 80008f0:	73fb      	strb	r3, [r7, #15]
					break;
 80008f2:	e009      	b.n	8000908 <Check_Row+0x144>
				case ROW3:
					Nkey = 0x01;
 80008f4:	2301      	movs	r3, #1
 80008f6:	73fb      	strb	r3, [r7, #15]
					break;
 80008f8:	e006      	b.n	8000908 <Check_Row+0x144>
				case ROW4:
					Nkey = 0x01;
 80008fa:	2301      	movs	r3, #1
 80008fc:	73fb      	strb	r3, [r7, #15]
					break;
 80008fe:	e003      	b.n	8000908 <Check_Row+0x144>
			}
		}
	}
	else Nkey = 0x00;
 8000900:	2300      	movs	r3, #0
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	e000      	b.n	8000908 <Check_Row+0x144>
		}
 8000906:	bf00      	nop

	return Nkey;
 8000908:	7bfb      	ldrb	r3, [r7, #15]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	08005260 	.word	0x08005260
 8000918:	08005274 	.word	0x08005274
 800091c:	08005288 	.word	0x08005288

08000920 <main>:
uint16_t hours, minutes, seconds, count;
uint16_t timer_val;


int main(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	f5ad 5d9d 	sub.w	sp, sp, #5024	; 0x13a0
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0

  HAL_Init();
 800092a:	f001 f885 	bl	8001a38 <HAL_Init>
  SystemClock_Config();
 800092e:	f000 fb37 	bl	8000fa0 <SystemClock_Config>

  MX_GPIO_Init();
 8000932:	f7ff fea3 	bl	800067c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000936:	f7ff fee5 	bl	8000704 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800093a:	f001 f829 	bl	8001990 <MX_USART6_UART_Init>

  MX_TIM2_Init();
 800093e:	f000 ff95 	bl	800186c <MX_TIM2_Init>
 // HAL_TIM_Base_Start(&htim2);

  MX_TIM3_Init();
 8000942:	f000 ffeb 	bl	800191c <MX_TIM3_Init>
  HAL_TIM_Base_Start(&htim3);
 8000946:	4847      	ldr	r0, [pc, #284]	; (8000a64 <main+0x144>)
 8000948:	f002 ff96 	bl	8003878 <HAL_TIM_Base_Start>

  oled_Init();
 800094c:	f000 fba4 	bl	8001098 <oled_Init>
  Buzzer_Init();
 8000950:	f7ff fe12 	bl	8000578 <Buzzer_Init>


  uint32_t megalovania_melody[] = {
 8000954:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8000958:	4a43      	ldr	r2, [pc, #268]	; (8000a68 <main+0x148>)
 800095a:	4618      	mov	r0, r3
 800095c:	4611      	mov	r1, r2
 800095e:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 8000962:	461a      	mov	r2, r3
 8000964:	f004 f824 	bl	80049b0 <memcpy>
  			N_D3, N_D3, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_C3, N_C3, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_B2, N_B2, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_AS2, N_AS2, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_D3, N_D3, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_C3, N_C3, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_B2, N_B2, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_AS2, N_AS2, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_D4, N_D4, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_C4, N_C4, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_B3, N_B3, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_AS3, N_AS3, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_D4, N_D4, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_C4, N_C4, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_B3, N_B3, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_AS3, N_AS3, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_F4, N_F4, N_F4, N_F4, N_F4, N_D4, N_D4, N_D4, N_F4, N_F4, N_F4, N_G4, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, 0, N_F4, N_F4, N_F4, N_G4, N_GS4, N_A4, N_C5, N_A4, N_D5, N_D5, N_D5, N_A4, N_D5, N_C5, N_F4, N_F4, N_F4, N_F4, N_F4, N_D4, N_D4, N_D4, N_F4, N_F4, N_F4, N_F4, N_D4, N_F4, N_E4, N_D4, N_C4, 0, N_G4, N_E4, N_D4, N_D4, N_D4, N_D4, N_F3, N_G3, N_AS3, N_C4, N_D4, N_F4, N_C5, 0, N_F4, N_D4, N_F4, N_G4, N_GS4, N_G4, N_F4, N_D4, N_GS4, N_G4, N_F4, N_D4, N_F4, N_F4, N_F4, N_GS4, N_A4, N_C5, N_A4, N_GS4, N_G4, N_F4, N_D4, N_E4, N_F4, N_G4, N_A4, N_C5, N_CS5, N_GS4, N_GS4, N_G4, N_F4, N_G4, N_F3, N_G3, N_A3, N_F4, N_E4, N_D4, N_E4, N_F4, N_G4, N_E4, N_A4, N_A4, N_G4, N_F4, N_DS4, N_CS4, N_DS4, 0, N_F4, N_D4, N_F4, N_G4, N_GS4, N_G4, N_F4, N_D4, N_GS4, N_G4, N_F4, N_D4, N_F4, N_F4, N_F4, N_GS4, N_A4, N_C5, N_A4, N_GS4, N_G4, N_F4, N_D4, N_E4, N_F4, N_G4, N_A4, N_C5, N_CS5, N_GS4, N_GS4, N_G4, N_F4, N_G4, N_F3, N_G3, N_A3, N_F4, N_E4, N_D4, N_E4, N_F4, N_G4, N_E4, N_A4, N_A4, N_G4, N_F4, N_DS4, N_CS4, N_DS4,
  	};
  	uint32_t megalovania_delays[] = {
 8000968:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800096c:	4a3f      	ldr	r2, [pc, #252]	; (8000a6c <main+0x14c>)
 800096e:	4618      	mov	r0, r3
 8000970:	4611      	mov	r1, r2
 8000972:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 8000976:	461a      	mov	r2, r3
 8000978:	f004 f81a 	bl	80049b0 <memcpy>
  			16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 8, 16, 8, 8, 8, 8, 4, 16, 8, 16, 8, 8, 8, 16, 16, 16, 16, 16, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 2, 8, 16, 8, 8, 8, 8, 4, 16, 8, 16, 8, 8, 8, 8, 8, 16, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8, 15, 8, 8, 2, 3, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8, 2, 16, 8, 16, 8, 16, 16, 16, 16, 16, 16, 8, 8, 8, 8,  8, 8, 16, 16, 16, 2, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 2, 8, 8, 8, 8, 2, 2, 3, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8, 2, 16, 8, 16, 8, 16, 16, 16, 16, 16, 16, 8, 8, 8, 8,  8, 8, 16, 16, 16, 2, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 2, 8, 8, 8, 8, 2, 1
  	};
  	uint32_t zelda_melody[] = {
 800097c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8000980:	4a3b      	ldr	r2, [pc, #236]	; (8000a70 <main+0x150>)
 8000982:	4618      	mov	r0, r3
 8000984:	4611      	mov	r1, r2
 8000986:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800098a:	461a      	mov	r2, r3
 800098c:	f004 f810 	bl	80049b0 <memcpy>
  			N_AS4, 0, 0, N_AS4, N_AS4, N_AS4, N_AS4, N_AS4, 0, N_GS4, N_AS4, 0, 0, N_AS4, N_AS4, N_AS4, N_AS4, N_AS4, 0, N_GS4, N_AS4, 0, 0, N_AS4, N_AS4, N_AS4, N_AS4, N_AS4, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_AS4, N_F3, N_F3, 0, N_AS4, N_AS4, N_C5, N_D5, N_DS5, N_F5, 0, N_F5, N_F5, N_FS5, N_GS5, N_AS5, 0, N_AS5, N_AS5, N_AS5, N_GS5, N_FS5, N_GS5, 0, N_FS5, N_F5, N_F5, N_DS5, N_DS5, N_F5, N_FS5, N_F5, N_DS5, N_CS5, N_CS5, N_DS5, N_F5, N_DS5, N_CS5, N_C5, N_C5, N_D5, N_E5, N_G5, N_F5, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_AS4, N_F3, N_F3, 0, N_AS4, N_AS4, N_C5, N_D5, N_DS5, N_F5, 0, N_F5, N_F5, N_FS5, N_GS5, N_AS5, 0, N_CS6, N_C6, N_A5, 0, N_F5, N_FS5, 0, N_AS5, N_A5, N_F5, 0, N_F5, N_FS5, 0, N_AS5, N_A5, N_F5, 0, N_D5, N_DS5, 0, N_FS5, N_F5, N_CS5, 0, N_AS4, N_C5, N_C5, N_D5, N_E5, 0, N_G5, N_F5, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_AS4, N_F3, N_F3, 0, N_AS4, N_AS4, N_C5, N_D5, N_DS5, N_F5, 0, N_F5, N_F5, N_FS5, N_GS5, N_AS5, 0, N_AS5, N_AS5, N_AS5, N_GS5, N_FS5, N_GS5, 0, N_FS5, N_F5, N_F5, N_DS5, N_DS5, N_F5, N_FS5, N_F5, N_DS5, N_CS5, N_CS5, N_DS5, N_F5, N_DS5, N_CS5, N_C5, N_C5, N_D5, N_E5, N_G5, N_F5, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_AS4, N_F3, N_F3, 0, N_AS4, N_AS4, N_C5, N_D5, N_DS5, N_F5, 0, N_F5, N_F5, N_FS5, N_GS5, N_AS5, 0, N_CS6, N_C6, N_A5, 0, N_F5, N_FS5, 0, N_AS5, N_A5, N_F5, 0, N_F5, N_FS5, 0, N_AS5, N_A5, N_F5, 0, N_D5, N_DS5, 0, N_FS5, N_F5, N_CS5, 0, N_AS4, N_C5, N_C5, N_D5, N_E5, 0, N_G5, N_F5, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3
  	};
  	uint32_t zelda_delays[] = {
 8000990:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000994:	4a37      	ldr	r2, [pc, #220]	; (8000a74 <main+0x154>)
 8000996:	4618      	mov	r0, r3
 8000998:	4611      	mov	r1, r2
 800099a:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800099e:	461a      	mov	r2, r3
 80009a0:	f004 f806 	bl	80049b0 <memcpy>
  	};

  while(1)
    {

	 hours = (A[0]-48)*10+(A[1]-48)*1;
 80009a4:	4b34      	ldr	r3, [pc, #208]	; (8000a78 <main+0x158>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	0092      	lsls	r2, r2, #2
 80009ac:	4413      	add	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	4b31      	ldr	r3, [pc, #196]	; (8000a78 <main+0x158>)
 80009b4:	885b      	ldrh	r3, [r3, #2]
 80009b6:	4413      	add	r3, r2
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80009be:	b29a      	uxth	r2, r3
 80009c0:	4b2e      	ldr	r3, [pc, #184]	; (8000a7c <main+0x15c>)
 80009c2:	801a      	strh	r2, [r3, #0]
  	 minutes = (A[3]-48)*10 + (A[4]-48)*1;
 80009c4:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <main+0x158>)
 80009c6:	88db      	ldrh	r3, [r3, #6]
 80009c8:	461a      	mov	r2, r3
 80009ca:	0092      	lsls	r2, r2, #2
 80009cc:	4413      	add	r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <main+0x158>)
 80009d4:	891b      	ldrh	r3, [r3, #8]
 80009d6:	4413      	add	r3, r2
 80009d8:	b29b      	uxth	r3, r3
 80009da:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80009de:	b29a      	uxth	r2, r3
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <main+0x160>)
 80009e2:	801a      	strh	r2, [r3, #0]
  	 seconds = (A[6]-48)*10+ (A[7]-48)*1;
 80009e4:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <main+0x158>)
 80009e6:	899b      	ldrh	r3, [r3, #12]
 80009e8:	461a      	mov	r2, r3
 80009ea:	0092      	lsls	r2, r2, #2
 80009ec:	4413      	add	r3, r2
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <main+0x158>)
 80009f4:	89db      	ldrh	r3, [r3, #14]
 80009f6:	4413      	add	r3, r2
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <main+0x164>)
 8000a02:	801a      	strh	r2, [r3, #0]
     count = seconds + minutes *60 + hours *3600;
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <main+0x160>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	0112      	lsls	r2, r2, #4
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <main+0x15c>)
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	4619      	mov	r1, r3
 8000a18:	0109      	lsls	r1, r1, #4
 8000a1a:	1acb      	subs	r3, r1, r3
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	0109      	lsls	r1, r1, #4
 8000a20:	1acb      	subs	r3, r1, r3
 8000a22:	011b      	lsls	r3, r3, #4
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	4413      	add	r3, r2
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <main+0x164>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <main+0x168>)
 8000a34:	801a      	strh	r2, [r3, #0]

       oled_SetCursor(0,0);
 8000a36:	2100      	movs	r1, #0
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f000 fcf3 	bl	8001424 <oled_SetCursor>
       oled_WriteString("Time setting: ",Font_7x10,White);
 8000a3e:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <main+0x16c>)
 8000a40:	2301      	movs	r3, #1
 8000a42:	ca06      	ldmia	r2, {r1, r2}
 8000a44:	4812      	ldr	r0, [pc, #72]	; (8000a90 <main+0x170>)
 8000a46:	f000 fcc7 	bl	80013d8 <oled_WriteString>
      	  KB_Test();
 8000a4a:	f000 f981 	bl	8000d50 <KB_Test>

      	 HAL_Delay(95);
 8000a4e:	205f      	movs	r0, #95	; 0x5f
 8000a50:	f001 f864 	bl	8001b1c <HAL_Delay>
      	 if(A[8] == '<' )
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <main+0x158>)
 8000a56:	8a1b      	ldrh	r3, [r3, #16]
 8000a58:	2b3c      	cmp	r3, #60	; 0x3c
 8000a5a:	d000      	beq.n	8000a5e <main+0x13e>
	 hours = (A[0]-48)*10+(A[1]-48)*1;
 8000a5c:	e7a2      	b.n	80009a4 <main+0x84>
      	 {
      		// control = 8;
      		 break;
 8000a5e:	bf00      	nop
      	 }

    }

 	  while( __HAL_TIM_GET_COUNTER(&htim3) - timer_val >= 385 && count >0)
 8000a60:	e122      	b.n	8000ca8 <main+0x388>
 8000a62:	bf00      	nop
 8000a64:	200005f4 	.word	0x200005f4
 8000a68:	080052ac 	.word	0x080052ac
 8000a6c:	0800580c 	.word	0x0800580c
 8000a70:	08005d6c 	.word	0x08005d6c
 8000a74:	0800619c 	.word	0x0800619c
 8000a78:	20000520 	.word	0x20000520
 8000a7c:	200005f0 	.word	0x200005f0
 8000a80:	200005ee 	.word	0x200005ee
 8000a84:	200005e8 	.word	0x200005e8
 8000a88:	200005ea 	.word	0x200005ea
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	08005294 	.word	0x08005294
 	  	  	 	 {

 		  	  	  char str[20], hour[20], minute[20], second[20];
 	  	  	 		  hours = count / 3600;
 8000a94:	4ba2      	ldr	r3, [pc, #648]	; (8000d20 <main+0x400>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	4aa2      	ldr	r2, [pc, #648]	; (8000d24 <main+0x404>)
 8000a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9e:	0adb      	lsrs	r3, r3, #11
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	4ba1      	ldr	r3, [pc, #644]	; (8000d28 <main+0x408>)
 8000aa4:	801a      	strh	r2, [r3, #0]
 	  	  	 		  minutes = (count - 3600 *hours)/60;
 8000aa6:	4b9e      	ldr	r3, [pc, #632]	; (8000d20 <main+0x400>)
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4b9e      	ldr	r3, [pc, #632]	; (8000d28 <main+0x408>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4b9e      	ldr	r3, [pc, #632]	; (8000d2c <main+0x40c>)
 8000ab4:	fb03 f301 	mul.w	r3, r3, r1
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a9d      	ldr	r2, [pc, #628]	; (8000d30 <main+0x410>)
 8000abc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac0:	441a      	add	r2, r3
 8000ac2:	1152      	asrs	r2, r2, #5
 8000ac4:	17db      	asrs	r3, r3, #31
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	4b9a      	ldr	r3, [pc, #616]	; (8000d34 <main+0x414>)
 8000acc:	801a      	strh	r2, [r3, #0]
 	  	  	 		  seconds = count - hours*3600 - minutes*60;
 8000ace:	4b96      	ldr	r3, [pc, #600]	; (8000d28 <main+0x408>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	1ad2      	subs	r2, r2, r3
 8000ad8:	4611      	mov	r1, r2
 8000ada:	01c8      	lsls	r0, r1, #7
 8000adc:	4611      	mov	r1, r2
 8000ade:	4602      	mov	r2, r0
 8000ae0:	440a      	add	r2, r1
 8000ae2:	0052      	lsls	r2, r2, #1
 8000ae4:	4413      	add	r3, r2
 8000ae6:	011b      	lsls	r3, r3, #4
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	4b92      	ldr	r3, [pc, #584]	; (8000d34 <main+0x414>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	4619      	mov	r1, r3
 8000af0:	011b      	lsls	r3, r3, #4
 8000af2:	1acb      	subs	r3, r1, r3
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	4413      	add	r3, r2
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	4b88      	ldr	r3, [pc, #544]	; (8000d20 <main+0x400>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	4413      	add	r3, r2
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	4b8c      	ldr	r3, [pc, #560]	; (8000d38 <main+0x418>)
 8000b06:	801a      	strh	r2, [r3, #0]

 	  	  	 			  	sprintf(str, "%d", count);
 8000b08:	4b85      	ldr	r3, [pc, #532]	; (8000d20 <main+0x400>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000b12:	3b14      	subs	r3, #20
 8000b14:	4989      	ldr	r1, [pc, #548]	; (8000d3c <main+0x41c>)
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 ff60 	bl	80049dc <siprintf>
 	  	  	 			    sprintf(hour, "%d", hours);
 8000b1c:	4b82      	ldr	r3, [pc, #520]	; (8000d28 <main+0x408>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b26:	3b08      	subs	r3, #8
 8000b28:	4984      	ldr	r1, [pc, #528]	; (8000d3c <main+0x41c>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 ff56 	bl	80049dc <siprintf>
 	  	  	 			    sprintf(minute, "%d", minutes);
 8000b30:	4b80      	ldr	r3, [pc, #512]	; (8000d34 <main+0x414>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b3a:	3b1c      	subs	r3, #28
 8000b3c:	497f      	ldr	r1, [pc, #508]	; (8000d3c <main+0x41c>)
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 ff4c 	bl	80049dc <siprintf>
 	  	  	 			    sprintf(second, "%d", seconds);
 8000b44:	4b7c      	ldr	r3, [pc, #496]	; (8000d38 <main+0x418>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b4e:	3b10      	subs	r3, #16
 8000b50:	497a      	ldr	r1, [pc, #488]	; (8000d3c <main+0x41c>)
 8000b52:	4618      	mov	r0, r3
 8000b54:	f003 ff42 	bl	80049dc <siprintf>
 	  	  	 			    if(seconds < 10)
 8000b58:	4b77      	ldr	r3, [pc, #476]	; (8000d38 <main+0x418>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	2b09      	cmp	r3, #9
 8000b5e:	d81d      	bhi.n	8000b9c <main+0x27c>
 	  	  	 				  {
 	  	  	 			    	char temp[20];
 	  	  	 			    	strcpy(temp,second);
 8000b60:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000b64:	3a10      	subs	r2, #16
 8000b66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f003 ff63 	bl	8004a3a <strcpy>
 	  	  	 			    	second[0]=48;
 8000b74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b78:	3b10      	subs	r3, #16
 8000b7a:	2230      	movs	r2, #48	; 0x30
 8000b7c:	701a      	strb	r2, [r3, #0]
 	  	  	 			    	second[1]='\0';
 8000b7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b82:	3b10      	subs	r3, #16
 8000b84:	2200      	movs	r2, #0
 8000b86:	705a      	strb	r2, [r3, #1]
 	  	  	 			    	strcat(second,temp);
 8000b88:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000b8c:	3a04      	subs	r2, #4
 8000b8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b92:	3b10      	subs	r3, #16
 8000b94:	4611      	mov	r1, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f003 ff40 	bl	8004a1c <strcat>
 	  	  	 				  }
 	  	  	 			    if(minutes < 10)
 8000b9c:	4b65      	ldr	r3, [pc, #404]	; (8000d34 <main+0x414>)
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	2b09      	cmp	r3, #9
 8000ba2:	d81d      	bhi.n	8000be0 <main+0x2c0>
 	  	  	 				  {
 	  	  	 			    	char temp[20];
 	  	  	 			    	strcpy(temp,minute);
 8000ba4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000ba8:	3a1c      	subs	r2, #28
 8000baa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bae:	3b18      	subs	r3, #24
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 ff41 	bl	8004a3a <strcpy>
 	  	  	 			    	minute[0]=48;
 8000bb8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bbc:	3b1c      	subs	r3, #28
 8000bbe:	2230      	movs	r2, #48	; 0x30
 8000bc0:	701a      	strb	r2, [r3, #0]
 	  	  	 			    	minute[1]='\0';
 8000bc2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bc6:	3b1c      	subs	r3, #28
 8000bc8:	2200      	movs	r2, #0
 8000bca:	705a      	strb	r2, [r3, #1]
 	  	  	 			    	strcat(minute,temp);
 8000bcc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000bd0:	3a18      	subs	r2, #24
 8000bd2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bd6:	3b1c      	subs	r3, #28
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f003 ff1e 	bl	8004a1c <strcat>
 	  	  	 				  }
 	  	  	 			    if(hours < 10)
 8000be0:	4b51      	ldr	r3, [pc, #324]	; (8000d28 <main+0x408>)
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	2b09      	cmp	r3, #9
 8000be6:	d81d      	bhi.n	8000c24 <main+0x304>
 	  	  	 				  {
 	  	  	 			    	char temp[20];
 	  	  	 			    	strcpy(temp,hour);
 8000be8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000bec:	3a08      	subs	r2, #8
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	3b0c      	subs	r3, #12
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 ff1f 	bl	8004a3a <strcpy>
 	  	  	 			    	hour[0]=48;
 8000bfc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c00:	3b08      	subs	r3, #8
 8000c02:	2230      	movs	r2, #48	; 0x30
 8000c04:	701a      	strb	r2, [r3, #0]
 	  	  	 			    	hour[1]='\0';
 8000c06:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c0a:	3b08      	subs	r3, #8
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	705a      	strb	r2, [r3, #1]
 	  	  	 			    	strcat(hour,temp);
 8000c10:	f107 0210 	add.w	r2, r7, #16
 8000c14:	3a0c      	subs	r2, #12
 8000c16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c1a:	3b08      	subs	r3, #8
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 fefc 	bl	8004a1c <strcat>
 	  	  	 				  }

 	  	  	 			    oled_SetCursor(30+Xcoor,32+Ycoor);
 8000c24:	211e      	movs	r1, #30
 8000c26:	201b      	movs	r0, #27
 8000c28:	f000 fbfc 	bl	8001424 <oled_SetCursor>
 	  	  	 			    oled_WriteString(hour, Font_11x18, White);
 8000c2c:	4a44      	ldr	r2, [pc, #272]	; (8000d40 <main+0x420>)
 8000c2e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8000c32:	3808      	subs	r0, #8
 8000c34:	2301      	movs	r3, #1
 8000c36:	ca06      	ldmia	r2, {r1, r2}
 8000c38:	f000 fbce 	bl	80013d8 <oled_WriteString>
 	  	  	 			    oled_WriteChar(':', Font_11x18, White);
 8000c3c:	4a40      	ldr	r2, [pc, #256]	; (8000d40 <main+0x420>)
 8000c3e:	2301      	movs	r3, #1
 8000c40:	ca06      	ldmia	r2, {r1, r2}
 8000c42:	203a      	movs	r0, #58	; 0x3a
 8000c44:	f000 fb48 	bl	80012d8 <oled_WriteChar>

 	  	  	 			    oled_SetCursor(60+Xcoor,32+Ycoor);
 8000c48:	211e      	movs	r1, #30
 8000c4a:	2039      	movs	r0, #57	; 0x39
 8000c4c:	f000 fbea 	bl	8001424 <oled_SetCursor>
 	  	  	 			    oled_WriteString(minute, Font_11x18, White);
 8000c50:	4a3b      	ldr	r2, [pc, #236]	; (8000d40 <main+0x420>)
 8000c52:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8000c56:	381c      	subs	r0, #28
 8000c58:	2301      	movs	r3, #1
 8000c5a:	ca06      	ldmia	r2, {r1, r2}
 8000c5c:	f000 fbbc 	bl	80013d8 <oled_WriteString>
 	  	  	 			    oled_WriteChar(':', Font_11x18, White);
 8000c60:	4a37      	ldr	r2, [pc, #220]	; (8000d40 <main+0x420>)
 8000c62:	2301      	movs	r3, #1
 8000c64:	ca06      	ldmia	r2, {r1, r2}
 8000c66:	203a      	movs	r0, #58	; 0x3a
 8000c68:	f000 fb36 	bl	80012d8 <oled_WriteChar>

 	  	  	 			    oled_SetCursor(90+Xcoor,32+Ycoor);
 8000c6c:	211e      	movs	r1, #30
 8000c6e:	2057      	movs	r0, #87	; 0x57
 8000c70:	f000 fbd8 	bl	8001424 <oled_SetCursor>
 	  	  	 			    oled_WriteString(second, Font_11x18, White);
 8000c74:	4a32      	ldr	r2, [pc, #200]	; (8000d40 <main+0x420>)
 8000c76:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000c7a:	3810      	subs	r0, #16
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	ca06      	ldmia	r2, {r1, r2}
 8000c80:	f000 fbaa 	bl	80013d8 <oled_WriteString>
 	  	  	 			    timer_val = __HAL_TIM_GET_COUNTER(&htim3);
 8000c84:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <main+0x424>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b2e      	ldr	r3, [pc, #184]	; (8000d48 <main+0x428>)
 8000c8e:	801a      	strh	r2, [r3, #0]
 	  	  	 			    count--;
 8000c90:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <main+0x400>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <main+0x400>)
 8000c9a:	801a      	strh	r2, [r3, #0]
 	  	  	 			    if(count  <= -1)
	  	  	 			    		break;

 	  	  	 			    else
 	  	  	 			    {
 	  	  	 			    	oled_UpdateScreen();
 8000c9c:	f000 fa8c 	bl	80011b8 <oled_UpdateScreen>
 	  	  	 			    	HAL_Delay(1000);
 8000ca0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca4:	f000 ff3a 	bl	8001b1c <HAL_Delay>
 	  while( __HAL_TIM_GET_COUNTER(&htim3) - timer_val >= 385 && count >0)
 8000ca8:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <main+0x424>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cae:	4a26      	ldr	r2, [pc, #152]	; (8000d48 <main+0x428>)
 8000cb0:	8812      	ldrh	r2, [r2, #0]
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000cb8:	d904      	bls.n	8000cc4 <main+0x3a4>
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <main+0x400>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f47f aee8 	bne.w	8000a94 <main+0x174>
	  	 	 }


	while(1)
	{
		  oled_UpdateScreen();
 8000cc4:	f000 fa78 	bl	80011b8 <oled_UpdateScreen>
		  oled_SetCursor(90+Xcoor,32+Ycoor);
 8000cc8:	211e      	movs	r1, #30
 8000cca:	2057      	movs	r0, #87	; 0x57
 8000ccc:	f000 fbaa 	bl	8001424 <oled_SetCursor>
		  oled_WriteString("00", Font_11x18, White);
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <main+0x420>)
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	ca06      	ldmia	r2, {r1, r2}
 8000cd6:	481d      	ldr	r0, [pc, #116]	; (8000d4c <main+0x42c>)
 8000cd8:	f000 fb7e 	bl	80013d8 <oled_WriteString>
		  oled_UpdateScreen();
 8000cdc:	f000 fa6c 	bl	80011b8 <oled_UpdateScreen>
		  HAL_Delay(944);
 8000ce0:	f44f 706c 	mov.w	r0, #944	; 0x3b0
 8000ce4:	f000 ff1a 	bl	8001b1c <HAL_Delay>

		  Buzzer_Play(zelda_melody, zelda_delays, sizeof(zelda_melody) / sizeof(uint32_t));
 8000ce8:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8000cec:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8000cf0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fc79 	bl	80005ec <Buzzer_Play>
		  HAL_Delay(1000);
 8000cfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cfe:	f000 ff0d 	bl	8001b1c <HAL_Delay>
		  Buzzer_Play(megalovania_melody, megalovania_delays, sizeof(megalovania_melody) / sizeof(uint32_t));
 8000d02:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 8000d06:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8000d0a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fc6c 	bl	80005ec <Buzzer_Play>
		  HAL_Delay(1000);
 8000d14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d18:	f000 ff00 	bl	8001b1c <HAL_Delay>
		  oled_UpdateScreen();
 8000d1c:	e7d2      	b.n	8000cc4 <main+0x3a4>
 8000d1e:	bf00      	nop
 8000d20:	200005ea 	.word	0x200005ea
 8000d24:	91a2b3c5 	.word	0x91a2b3c5
 8000d28:	200005f0 	.word	0x200005f0
 8000d2c:	fffff1f0 	.word	0xfffff1f0
 8000d30:	88888889 	.word	0x88888889
 8000d34:	200005ee 	.word	0x200005ee
 8000d38:	200005e8 	.word	0x200005e8
 8000d3c:	080052a4 	.word	0x080052a4
 8000d40:	20000008 	.word	0x20000008
 8000d44:	200005f4 	.word	0x200005f4
 8000d48:	200005ec 	.word	0x200005ec
 8000d4c:	080052a8 	.word	0x080052a8

08000d50 <KB_Test>:
	}
}

void KB_Test( void ) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
	UART_Transmit( (uint8_t*)"KB test start\n" );
 8000d56:	487e      	ldr	r0, [pc, #504]	; (8000f50 <KB_Test+0x200>)
 8000d58:	f000 fbce 	bl	80014f8 <UART_Transmit>
	uint8_t R = 0, C = 0, L = 0, Row[4] = {0x1E,0x3D, 0x7B, 0xF7}, Key, OldKey;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	71fb      	strb	r3, [r7, #7]
 8000d60:	2300      	movs	r3, #0
 8000d62:	71bb      	strb	r3, [r7, #6]
 8000d64:	2300      	movs	r3, #0
 8000d66:	717b      	strb	r3, [r7, #5]
 8000d68:	4b7a      	ldr	r3, [pc, #488]	; (8000f54 <KB_Test+0x204>)
 8000d6a:	603b      	str	r3, [r7, #0]
	//uint8_t Row[4] = {0xF7, 0x7B, 0x3D, 0x1E};
	//oled_Reset();

	//oled_WriteString("Time setting:", Font_7x10, White);
	OLED_KB(OLED_Keys);
 8000d6c:	487a      	ldr	r0, [pc, #488]	; (8000f58 <KB_Test+0x208>)
 8000d6e:	f000 f8fb 	bl	8000f68 <OLED_KB>
	//oled_UpdateScreen();
	for ( int i = 0; i < 4; i++ ) {
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	e0e1      	b.n	8000f3c <KB_Test+0x1ec>
		//while( !( R && C && L ) ) {
			OldKey = Key;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	713b      	strb	r3, [r7, #4]
			Key = Check_Row(Row[i]);
 8000d7c:	463a      	mov	r2, r7
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	4413      	add	r3, r2
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fd1d 	bl	80007c4 <Check_Row>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	73fb      	strb	r3, [r7, #15]
			if ( Key == 0x01 ) {
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d13a      	bne.n	8000e0a <KB_Test+0xba>
				//UART_Transmit( (uint8_t*)"Right pressed\n" );
				R = 1;
 8000d94:	2301      	movs	r3, #1
 8000d96:	71fb      	strb	r3, [r7, #7]
				OLED_Keys[2+3*i] = 2+3*i+49;
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	0052      	lsls	r2, r2, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	b299      	uxth	r1, r3
 8000da4:	68ba      	ldr	r2, [r7, #8]
 8000da6:	4613      	mov	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4413      	add	r3, r2
 8000dac:	3302      	adds	r3, #2
 8000dae:	f101 0233 	add.w	r2, r1, #51	; 0x33
 8000db2:	b291      	uxth	r1, r2
 8000db4:	4a68      	ldr	r2, [pc, #416]	; (8000f58 <KB_Test+0x208>)
 8000db6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				A[t++] = 2+3*i+49;
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	0052      	lsls	r2, r2, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	4b65      	ldr	r3, [pc, #404]	; (8000f5c <KB_Test+0x20c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	1c59      	adds	r1, r3, #1
 8000dcc:	4863      	ldr	r0, [pc, #396]	; (8000f5c <KB_Test+0x20c>)
 8000dce:	6001      	str	r1, [r0, #0]
 8000dd0:	3233      	adds	r2, #51	; 0x33
 8000dd2:	b291      	uxth	r1, r2
 8000dd4:	4a62      	ldr	r2, [pc, #392]	; (8000f60 <KB_Test+0x210>)
 8000dd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				oled_SetCursor(t*8-2,12);
 8000dda:	4b60      	ldr	r3, [pc, #384]	; (8000f5c <KB_Test+0x20c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	3b02      	subs	r3, #2
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	210c      	movs	r1, #12
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 fb1a 	bl	8001424 <oled_SetCursor>
				oled_WriteChar(A[t-1], Font_7x10, White);
 8000df0:	4b5a      	ldr	r3, [pc, #360]	; (8000f5c <KB_Test+0x20c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	4a5a      	ldr	r2, [pc, #360]	; (8000f60 <KB_Test+0x210>)
 8000df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dfc:	b2d8      	uxtb	r0, r3
 8000dfe:	4a59      	ldr	r2, [pc, #356]	; (8000f64 <KB_Test+0x214>)
 8000e00:	2301      	movs	r3, #1
 8000e02:	ca06      	ldmia	r2, {r1, r2}
 8000e04:	f000 fa68 	bl	80012d8 <oled_WriteChar>
 8000e08:	e095      	b.n	8000f36 <KB_Test+0x1e6>

				//OLED_KB(OLED_Keys);
			} else if ( Key == 0x02 ) {
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d156      	bne.n	8000ebe <KB_Test+0x16e>
				//UART_Transmit( (uint8_t*)"Center pressed\n" );
				C = 1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	71bb      	strb	r3, [r7, #6]
				//OLED_Keys[1+3*i] = 1+3*i+49;
				if(i == 3)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d129      	bne.n	8000e6e <KB_Test+0x11e>
					{
						OLED_Keys[1+3*i] = 48;
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4413      	add	r3, r2
 8000e22:	3301      	adds	r3, #1
 8000e24:	4a4c      	ldr	r2, [pc, #304]	; (8000f58 <KB_Test+0x208>)
 8000e26:	2130      	movs	r1, #48	; 0x30
 8000e28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						A[t++] = 48;
 8000e2c:	4b4b      	ldr	r3, [pc, #300]	; (8000f5c <KB_Test+0x20c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	1c5a      	adds	r2, r3, #1
 8000e32:	494a      	ldr	r1, [pc, #296]	; (8000f5c <KB_Test+0x20c>)
 8000e34:	600a      	str	r2, [r1, #0]
 8000e36:	4a4a      	ldr	r2, [pc, #296]	; (8000f60 <KB_Test+0x210>)
 8000e38:	2130      	movs	r1, #48	; 0x30
 8000e3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						oled_SetCursor(t*8-2,12);
 8000e3e:	4b47      	ldr	r3, [pc, #284]	; (8000f5c <KB_Test+0x20c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	3b02      	subs	r3, #2
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	210c      	movs	r1, #12
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 fae8 	bl	8001424 <oled_SetCursor>
						oled_WriteChar(A[t-1], Font_7x10, White);
 8000e54:	4b41      	ldr	r3, [pc, #260]	; (8000f5c <KB_Test+0x20c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	4a41      	ldr	r2, [pc, #260]	; (8000f60 <KB_Test+0x210>)
 8000e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e60:	b2d8      	uxtb	r0, r3
 8000e62:	4a40      	ldr	r2, [pc, #256]	; (8000f64 <KB_Test+0x214>)
 8000e64:	2301      	movs	r3, #1
 8000e66:	ca06      	ldmia	r2, {r1, r2}
 8000e68:	f000 fa36 	bl	80012d8 <oled_WriteChar>
 8000e6c:	e063      	b.n	8000f36 <KB_Test+0x1e6>
					}
				else{
					A[t++] = 1+3*i+49;
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	461a      	mov	r2, r3
 8000e74:	0052      	lsls	r2, r2, #1
 8000e76:	4413      	add	r3, r2
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	4b38      	ldr	r3, [pc, #224]	; (8000f5c <KB_Test+0x20c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	1c59      	adds	r1, r3, #1
 8000e80:	4836      	ldr	r0, [pc, #216]	; (8000f5c <KB_Test+0x20c>)
 8000e82:	6001      	str	r1, [r0, #0]
 8000e84:	3232      	adds	r2, #50	; 0x32
 8000e86:	b291      	uxth	r1, r2
 8000e88:	4a35      	ldr	r2, [pc, #212]	; (8000f60 <KB_Test+0x210>)
 8000e8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					oled_SetCursor(t*8-2,12);
 8000e8e:	4b33      	ldr	r3, [pc, #204]	; (8000f5c <KB_Test+0x20c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	210c      	movs	r1, #12
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fac0 	bl	8001424 <oled_SetCursor>
					oled_WriteChar(A[t-1], Font_7x10, White);
 8000ea4:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <KB_Test+0x20c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	4a2d      	ldr	r2, [pc, #180]	; (8000f60 <KB_Test+0x210>)
 8000eac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eb0:	b2d8      	uxtb	r0, r3
 8000eb2:	4a2c      	ldr	r2, [pc, #176]	; (8000f64 <KB_Test+0x214>)
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	ca06      	ldmia	r2, {r1, r2}
 8000eb8:	f000 fa0e 	bl	80012d8 <oled_WriteChar>
 8000ebc:	e03b      	b.n	8000f36 <KB_Test+0x1e6>
				}
				//OLED_KB(OLED_Keys);

			} else if ( Key == 0x04 ) {
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d138      	bne.n	8000f36 <KB_Test+0x1e6>
				//UART_Transmit( (uint8_t*)"Left pressed\n" );
				L = 1;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	717b      	strb	r3, [r7, #5]
				OLED_Keys[3*i] = 3*i+49;
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	461a      	mov	r2, r3
 8000ece:	0052      	lsls	r2, r2, #1
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b299      	uxth	r1, r3
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	4413      	add	r3, r2
 8000edc:	f101 0231 	add.w	r2, r1, #49	; 0x31
 8000ee0:	b291      	uxth	r1, r2
 8000ee2:	4a1d      	ldr	r2, [pc, #116]	; (8000f58 <KB_Test+0x208>)
 8000ee4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				A[t++] = 3*i+49;
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	461a      	mov	r2, r3
 8000eee:	0052      	lsls	r2, r2, #1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <KB_Test+0x20c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	1c59      	adds	r1, r3, #1
 8000efa:	4818      	ldr	r0, [pc, #96]	; (8000f5c <KB_Test+0x20c>)
 8000efc:	6001      	str	r1, [r0, #0]
 8000efe:	3231      	adds	r2, #49	; 0x31
 8000f00:	b291      	uxth	r1, r2
 8000f02:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <KB_Test+0x210>)
 8000f04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				oled_SetCursor(t*8-2,12);
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <KB_Test+0x20c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	3b02      	subs	r3, #2
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	210c      	movs	r1, #12
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fa83 	bl	8001424 <oled_SetCursor>
				oled_WriteChar(A[t-1], Font_7x10, White);
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <KB_Test+0x20c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <KB_Test+0x210>)
 8000f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f2a:	b2d8      	uxtb	r0, r3
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <KB_Test+0x214>)
 8000f2e:	2301      	movs	r3, #1
 8000f30:	ca06      	ldmia	r2, {r1, r2}
 8000f32:	f000 f9d1 	bl	80012d8 <oled_WriteChar>
	for ( int i = 0; i < 4; i++ ) {
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	f77f af1a 	ble.w	8000d78 <KB_Test+0x28>
		//}
		//R = C = L = 0;
		//HAL_Delay(25);
	}
	//UART_Transmit( (uint8_t*)"KB test complete\n");
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	080065cc 	.word	0x080065cc
 8000f54:	f77b3d1e 	.word	0xf77b3d1e
 8000f58:	20000010 	.word	0x20000010
 8000f5c:	200000b4 	.word	0x200000b4
 8000f60:	20000520 	.word	0x20000520
 8000f64:	20000000 	.word	0x20000000

08000f68 <OLED_KB>:
void OLED_KB( uint16_t OLED_Keys[12]) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	for (int i = 3; i >= 0; i--) {
 8000f70:	2303      	movs	r3, #3
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	e00b      	b.n	8000f8e <OLED_KB+0x26>
		//oled_SetCursor(56, 5+(4-i)*10);
		for (int j = 0; j < 3; j++) {
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	e002      	b.n	8000f82 <OLED_KB+0x1a>
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	ddf9      	ble.n	8000f7c <OLED_KB+0x14>
	for (int i = 3; i >= 0; i--) {
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	daf0      	bge.n	8000f76 <OLED_KB+0xe>
			//oled_WriteChar(OLED_Keys[j+3*i], Font_7x10, White);
		}
	}
	oled_UpdateScreen();
 8000f94:	f000 f910 	bl	80011b8 <oled_UpdateScreen>
}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <SystemClock_Config>:
	oled_SetCursor(0, 0);
	oled_UpdateScreen();
}

void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	; 0x50
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	2230      	movs	r2, #48	; 0x30
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 fd0c 	bl	80049cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <SystemClock_Config+0xb4>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	4a21      	ldr	r2, [pc, #132]	; (8001054 <SystemClock_Config+0xb4>)
 8000fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <SystemClock_Config+0xb4>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <SystemClock_Config+0xb8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <SystemClock_Config+0xb8>)
 8000fea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <SystemClock_Config+0xb8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001000:	2301      	movs	r3, #1
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001004:	2310      	movs	r3, #16
 8001006:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001008:	2300      	movs	r3, #0
 800100a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100c:	f107 0320 	add.w	r3, r7, #32
 8001010:	4618      	mov	r0, r3
 8001012:	f001 ffe9 	bl	8002fe8 <HAL_RCC_OscConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800101c:	f000 f81e 	bl	800105c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001020:	230f      	movs	r3, #15
 8001022:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f002 fa4c 	bl	80034d8 <HAL_RCC_ClockConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001046:	f000 f809 	bl	800105c <Error_Handler>
  }
}
 800104a:	bf00      	nop
 800104c:	3750      	adds	r7, #80	; 0x50
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40007000 	.word	0x40007000

0800105c <Error_Handler>:


void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	e7fe      	b.n	8001064 <Error_Handler+0x8>
	...

08001068 <oled_WriteCommand>:
static uint8_t OLED_Buffer[1024];

static OLED_t OLED;


static void oled_WriteCommand(uint8_t command) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af04      	add	r7, sp, #16
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x00,1,&command,1,10);
 8001072:	230a      	movs	r3, #10
 8001074:	9302      	str	r3, [sp, #8]
 8001076:	2301      	movs	r3, #1
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2301      	movs	r3, #1
 8001080:	2200      	movs	r2, #0
 8001082:	2178      	movs	r1, #120	; 0x78
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <oled_WriteCommand+0x2c>)
 8001086:	f001 f933 	bl	80022f0 <HAL_I2C_Mem_Write>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200004cc 	.word	0x200004cc

08001098 <oled_Init>:


uint8_t oled_Init(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 800109c:	2064      	movs	r0, #100	; 0x64
 800109e:	f000 fd3d 	bl	8001b1c <HAL_Delay>

	oled_WriteCommand(0xAE);
 80010a2:	20ae      	movs	r0, #174	; 0xae
 80010a4:	f7ff ffe0 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 80010a8:	2020      	movs	r0, #32
 80010aa:	f7ff ffdd 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 80010ae:	2010      	movs	r0, #16
 80010b0:	f7ff ffda 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0xB0);
 80010b4:	20b0      	movs	r0, #176	; 0xb0
 80010b6:	f7ff ffd7 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0xC8);
 80010ba:	20c8      	movs	r0, #200	; 0xc8
 80010bc:	f7ff ffd4 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff ffd1 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 80010c6:	2010      	movs	r0, #16
 80010c8:	f7ff ffce 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0x40);
 80010cc:	2040      	movs	r0, #64	; 0x40
 80010ce:	f7ff ffcb 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0x81);
 80010d2:	2081      	movs	r0, #129	; 0x81
 80010d4:	f7ff ffc8 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0xFF);
 80010d8:	20ff      	movs	r0, #255	; 0xff
 80010da:	f7ff ffc5 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0xA1);
 80010de:	20a1      	movs	r0, #161	; 0xa1
 80010e0:	f7ff ffc2 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0xA6);
 80010e4:	20a6      	movs	r0, #166	; 0xa6
 80010e6:	f7ff ffbf 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0xA8);
 80010ea:	20a8      	movs	r0, #168	; 0xa8
 80010ec:	f7ff ffbc 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0x3F);
 80010f0:	203f      	movs	r0, #63	; 0x3f
 80010f2:	f7ff ffb9 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0xA4);
 80010f6:	20a4      	movs	r0, #164	; 0xa4
 80010f8:	f7ff ffb6 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0xD3);
 80010fc:	20d3      	movs	r0, #211	; 0xd3
 80010fe:	f7ff ffb3 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff ffb0 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0xD5);
 8001108:	20d5      	movs	r0, #213	; 0xd5
 800110a:	f7ff ffad 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0xF0);
 800110e:	20f0      	movs	r0, #240	; 0xf0
 8001110:	f7ff ffaa 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0xD9);
 8001114:	20d9      	movs	r0, #217	; 0xd9
 8001116:	f7ff ffa7 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0x22);
 800111a:	2022      	movs	r0, #34	; 0x22
 800111c:	f7ff ffa4 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0xDA);
 8001120:	20da      	movs	r0, #218	; 0xda
 8001122:	f7ff ffa1 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0x12);
 8001126:	2012      	movs	r0, #18
 8001128:	f7ff ff9e 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0xDB);
 800112c:	20db      	movs	r0, #219	; 0xdb
 800112e:	f7ff ff9b 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 8001132:	2020      	movs	r0, #32
 8001134:	f7ff ff98 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0x8D);
 8001138:	208d      	movs	r0, #141	; 0x8d
 800113a:	f7ff ff95 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0x14);
 800113e:	2014      	movs	r0, #20
 8001140:	f7ff ff92 	bl	8001068 <oled_WriteCommand>
	oled_WriteCommand(0xAF);
 8001144:	20af      	movs	r0, #175	; 0xaf
 8001146:	f7ff ff8f 	bl	8001068 <oled_WriteCommand>

	oled_Fill(Black);
 800114a:	2000      	movs	r0, #0
 800114c:	f000 f810 	bl	8001170 <oled_Fill>

	oled_UpdateScreen();
 8001150:	f000 f832 	bl	80011b8 <oled_UpdateScreen>

	OLED.CurrentX = 0;
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <oled_Init+0xd4>)
 8001156:	2200      	movs	r2, #0
 8001158:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = 0;
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <oled_Init+0xd4>)
 800115c:	2200      	movs	r2, #0
 800115e:	805a      	strh	r2, [r3, #2]

	OLED.Initialized = 1;
 8001160:	4b02      	ldr	r3, [pc, #8]	; (800116c <oled_Init+0xd4>)
 8001162:	2201      	movs	r2, #1
 8001164:	715a      	strb	r2, [r3, #5]

	return 1;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200004b8 	.word	0x200004b8

08001170 <oled_Fill>:

void oled_Fill(OLED_COLOR color) {
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	uint32_t i;

	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	e00d      	b.n	800119c <oled_Fill+0x2c>
		OLED_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <oled_Fill+0x1a>
 8001186:	2100      	movs	r1, #0
 8001188:	e000      	b.n	800118c <oled_Fill+0x1c>
 800118a:	21ff      	movs	r1, #255	; 0xff
 800118c:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <oled_Fill+0x44>)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4413      	add	r3, r2
 8001192:	460a      	mov	r2, r1
 8001194:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3301      	adds	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a2:	d3ed      	bcc.n	8001180 <oled_Fill+0x10>
	}
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	200000b8 	.word	0x200000b8

080011b8 <oled_UpdateScreen>:


void oled_UpdateScreen(void) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 80011be:	2300      	movs	r3, #0
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	e01d      	b.n	8001200 <oled_UpdateScreen+0x48>
		oled_WriteCommand(0xB0 + i);
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	3b50      	subs	r3, #80	; 0x50
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff4c 	bl	8001068 <oled_WriteCommand>
		oled_WriteCommand(0x00);
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff ff49 	bl	8001068 <oled_WriteCommand>
		oled_WriteCommand(0x10);
 80011d6:	2010      	movs	r0, #16
 80011d8:	f7ff ff46 	bl	8001068 <oled_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x40,1,&OLED_Buffer[OLED_WIDTH * i],OLED_WIDTH,100);
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	01db      	lsls	r3, r3, #7
 80011e0:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <oled_UpdateScreen+0x58>)
 80011e2:	4413      	add	r3, r2
 80011e4:	2264      	movs	r2, #100	; 0x64
 80011e6:	9202      	str	r2, [sp, #8]
 80011e8:	2280      	movs	r2, #128	; 0x80
 80011ea:	9201      	str	r2, [sp, #4]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	2240      	movs	r2, #64	; 0x40
 80011f2:	2178      	movs	r1, #120	; 0x78
 80011f4:	4807      	ldr	r0, [pc, #28]	; (8001214 <oled_UpdateScreen+0x5c>)
 80011f6:	f001 f87b 	bl	80022f0 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	3301      	adds	r3, #1
 80011fe:	71fb      	strb	r3, [r7, #7]
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	2b07      	cmp	r3, #7
 8001204:	d9de      	bls.n	80011c4 <oled_UpdateScreen+0xc>
	}
}
 8001206:	bf00      	nop
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200000b8 	.word	0x200000b8
 8001214:	200004cc 	.word	0x200004cc

08001218 <oled_DrawPixel>:

void oled_DrawPixel(uint8_t x, uint8_t y, OLED_COLOR color) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
 8001222:	460b      	mov	r3, r1
 8001224:	71bb      	strb	r3, [r7, #6]
 8001226:	4613      	mov	r3, r2
 8001228:	717b      	strb	r3, [r7, #5]
	if (x >= OLED_WIDTH || y >= OLED_HEIGHT) {
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	2b00      	cmp	r3, #0
 8001230:	db48      	blt.n	80012c4 <oled_DrawPixel+0xac>
 8001232:	79bb      	ldrb	r3, [r7, #6]
 8001234:	2b3f      	cmp	r3, #63	; 0x3f
 8001236:	d845      	bhi.n	80012c4 <oled_DrawPixel+0xac>
		return;
	}

	if (OLED.Inverted) {
 8001238:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <oled_DrawPixel+0xb8>)
 800123a:	791b      	ldrb	r3, [r3, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d006      	beq.n	800124e <oled_DrawPixel+0x36>
		color = (OLED_COLOR)!color;
 8001240:	797b      	ldrb	r3, [r7, #5]
 8001242:	2b00      	cmp	r3, #0
 8001244:	bf0c      	ite	eq
 8001246:	2301      	moveq	r3, #1
 8001248:	2300      	movne	r3, #0
 800124a:	b2db      	uxtb	r3, r3
 800124c:	717b      	strb	r3, [r7, #5]
	}

	if (color == White) {
 800124e:	797b      	ldrb	r3, [r7, #5]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d11a      	bne.n	800128a <oled_DrawPixel+0x72>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 8001254:	79fa      	ldrb	r2, [r7, #7]
 8001256:	79bb      	ldrb	r3, [r7, #6]
 8001258:	08db      	lsrs	r3, r3, #3
 800125a:	b2d8      	uxtb	r0, r3
 800125c:	4603      	mov	r3, r0
 800125e:	01db      	lsls	r3, r3, #7
 8001260:	4413      	add	r3, r2
 8001262:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <oled_DrawPixel+0xbc>)
 8001264:	5cd3      	ldrb	r3, [r2, r3]
 8001266:	b25a      	sxtb	r2, r3
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	2101      	movs	r1, #1
 8001270:	fa01 f303 	lsl.w	r3, r1, r3
 8001274:	b25b      	sxtb	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	b259      	sxtb	r1, r3
 800127a:	79fa      	ldrb	r2, [r7, #7]
 800127c:	4603      	mov	r3, r0
 800127e:	01db      	lsls	r3, r3, #7
 8001280:	4413      	add	r3, r2
 8001282:	b2c9      	uxtb	r1, r1
 8001284:	4a13      	ldr	r2, [pc, #76]	; (80012d4 <oled_DrawPixel+0xbc>)
 8001286:	54d1      	strb	r1, [r2, r3]
 8001288:	e01d      	b.n	80012c6 <oled_DrawPixel+0xae>
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 800128a:	79fa      	ldrb	r2, [r7, #7]
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	08db      	lsrs	r3, r3, #3
 8001290:	b2d8      	uxtb	r0, r3
 8001292:	4603      	mov	r3, r0
 8001294:	01db      	lsls	r3, r3, #7
 8001296:	4413      	add	r3, r2
 8001298:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <oled_DrawPixel+0xbc>)
 800129a:	5cd3      	ldrb	r3, [r2, r3]
 800129c:	b25a      	sxtb	r2, r3
 800129e:	79bb      	ldrb	r3, [r7, #6]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	2101      	movs	r1, #1
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	b25b      	sxtb	r3, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	4013      	ands	r3, r2
 80012b2:	b259      	sxtb	r1, r3
 80012b4:	79fa      	ldrb	r2, [r7, #7]
 80012b6:	4603      	mov	r3, r0
 80012b8:	01db      	lsls	r3, r3, #7
 80012ba:	4413      	add	r3, r2
 80012bc:	b2c9      	uxtb	r1, r1
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <oled_DrawPixel+0xbc>)
 80012c0:	54d1      	strb	r1, [r2, r3]
 80012c2:	e000      	b.n	80012c6 <oled_DrawPixel+0xae>
		return;
 80012c4:	bf00      	nop
	}
}
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	200004b8 	.word	0x200004b8
 80012d4:	200000b8 	.word	0x200000b8

080012d8 <oled_WriteChar>:
	oled_DrawHLine(x1, x2, y1, color);
	oled_DrawHLine(x1, x2, y2, color);
	oled_DrawVLine(y1, y2, x1, color);
	oled_DrawVLine(y1, y2, x2, color);
}
char oled_WriteChar(char ch, FontDef Font, OLED_COLOR color) {
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4604      	mov	r4, r0
 80012e0:	1d38      	adds	r0, r7, #4
 80012e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80012e6:	461a      	mov	r2, r3
 80012e8:	4623      	mov	r3, r4
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	4613      	mov	r3, r2
 80012ee:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 80012f0:	4b38      	ldr	r3, [pc, #224]	; (80013d4 <oled_WriteChar+0xfc>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	793b      	ldrb	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	2b7f      	cmp	r3, #127	; 0x7f
 80012fc:	dc06      	bgt.n	800130c <oled_WriteChar+0x34>
			OLED_HEIGHT <= (OLED.CurrentY + Font.FontHeight)) {
 80012fe:	4b35      	ldr	r3, [pc, #212]	; (80013d4 <oled_WriteChar+0xfc>)
 8001300:	885b      	ldrh	r3, [r3, #2]
 8001302:	461a      	mov	r2, r3
 8001304:	797b      	ldrb	r3, [r7, #5]
 8001306:	4413      	add	r3, r2
	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 8001308:	2b3f      	cmp	r3, #63	; 0x3f
 800130a:	dd01      	ble.n	8001310 <oled_WriteChar+0x38>
		return 0;
 800130c:	2300      	movs	r3, #0
 800130e:	e05d      	b.n	80013cc <oled_WriteChar+0xf4>
	}

	for (i = 0; i < Font.FontHeight; i++) {
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	e04c      	b.n	80013b0 <oled_WriteChar+0xd8>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	3b20      	subs	r3, #32
 800131c:	7979      	ldrb	r1, [r7, #5]
 800131e:	fb01 f303 	mul.w	r3, r1, r3
 8001322:	4619      	mov	r1, r3
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	440b      	add	r3, r1
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++) {
 8001330:	2300      	movs	r3, #0
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	e034      	b.n	80013a0 <oled_WriteChar+0xc8>
			if ((b << j) & 0x8000) {
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d012      	beq.n	800136c <oled_WriteChar+0x94>
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR) color);
 8001346:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <oled_WriteChar+0xfc>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	4413      	add	r3, r2
 8001352:	b2d8      	uxtb	r0, r3
 8001354:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <oled_WriteChar+0xfc>)
 8001356:	885b      	ldrh	r3, [r3, #2]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4413      	add	r3, r2
 8001360:	b2db      	uxtb	r3, r3
 8001362:	7bba      	ldrb	r2, [r7, #14]
 8001364:	4619      	mov	r1, r3
 8001366:	f7ff ff57 	bl	8001218 <oled_DrawPixel>
 800136a:	e016      	b.n	800139a <oled_WriteChar+0xc2>
			} else {
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR)!color);
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <oled_WriteChar+0xfc>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	4413      	add	r3, r2
 8001378:	b2d8      	uxtb	r0, r3
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <oled_WriteChar+0xfc>)
 800137c:	885b      	ldrh	r3, [r3, #2]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	4413      	add	r3, r2
 8001386:	b2d9      	uxtb	r1, r3
 8001388:	7bbb      	ldrb	r3, [r7, #14]
 800138a:	2b00      	cmp	r3, #0
 800138c:	bf0c      	ite	eq
 800138e:	2301      	moveq	r3, #1
 8001390:	2300      	movne	r3, #0
 8001392:	b2db      	uxtb	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	f7ff ff3f 	bl	8001218 <oled_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	3301      	adds	r3, #1
 800139e:	61bb      	str	r3, [r7, #24]
 80013a0:	793b      	ldrb	r3, [r7, #4]
 80013a2:	461a      	mov	r2, r3
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d3c5      	bcc.n	8001336 <oled_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++) {
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3301      	adds	r3, #1
 80013ae:	61fb      	str	r3, [r7, #28]
 80013b0:	797b      	ldrb	r3, [r7, #5]
 80013b2:	461a      	mov	r2, r3
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d3ad      	bcc.n	8001316 <oled_WriteChar+0x3e>
			}
		}
	}

	OLED.CurrentX += Font.FontWidth;
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <oled_WriteChar+0xfc>)
 80013bc:	881a      	ldrh	r2, [r3, #0]
 80013be:	793b      	ldrb	r3, [r7, #4]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <oled_WriteChar+0xfc>)
 80013c8:	801a      	strh	r2, [r3, #0]

	return ch;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3724      	adds	r7, #36	; 0x24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd90      	pop	{r4, r7, pc}
 80013d4:	200004b8 	.word	0x200004b8

080013d8 <oled_WriteString>:


char oled_WriteString(char* str, FontDef Font, OLED_COLOR color) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	1d38      	adds	r0, r7, #4
 80013e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80013e6:	70fb      	strb	r3, [r7, #3]
	while (*str) {
 80013e8:	e012      	b.n	8001410 <oled_WriteString+0x38>
		if (oled_WriteChar(*str, Font, color) != *str) {
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	7818      	ldrb	r0, [r3, #0]
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	1d3a      	adds	r2, r7, #4
 80013f2:	ca06      	ldmia	r2, {r1, r2}
 80013f4:	f7ff ff70 	bl	80012d8 <oled_WriteChar>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d002      	beq.n	800140a <oled_WriteString+0x32>
			return *str;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	e008      	b.n	800141c <oled_WriteString+0x44>
		}
		str++;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3301      	adds	r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1e8      	bne.n	80013ea <oled_WriteString+0x12>
	}
	return *str;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	781b      	ldrb	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <oled_SetCursor>:

void oled_SetCursor(uint8_t x, uint8_t y) {
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	460a      	mov	r2, r1
 800142e:	71fb      	strb	r3, [r7, #7]
 8001430:	4613      	mov	r3, r2
 8001432:	71bb      	strb	r3, [r7, #6]
	OLED.CurrentX = x;
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	b29a      	uxth	r2, r3
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <oled_SetCursor+0x2c>)
 800143a:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = y;
 800143c:	79bb      	ldrb	r3, [r7, #6]
 800143e:	b29a      	uxth	r2, r3
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <oled_SetCursor+0x2c>)
 8001442:	805a      	strh	r2, [r3, #2]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	200004b8 	.word	0x200004b8

08001454 <PCA9538_Read_Register>:
#include "main.h"
#include "i2c.h"
#include "sdk_uart.h"
#include "pca9538.h"

HAL_StatusTypeDef PCA9538_Read_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af04      	add	r7, sp, #16
 800145a:	4603      	mov	r3, r0
 800145c:	603a      	str	r2, [r7, #0]
 800145e:	80fb      	strh	r3, [r7, #6]
 8001460:	460b      	mov	r3, r1
 8001462:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(&hi2c1, addr | 1, reg, 1, buf, 1, 100);
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	b299      	uxth	r1, r3
 800146c:	797b      	ldrb	r3, [r7, #5]
 800146e:	b29a      	uxth	r2, r3
 8001470:	2364      	movs	r3, #100	; 0x64
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	2301      	movs	r3, #1
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2301      	movs	r3, #1
 800147e:	4804      	ldr	r0, [pc, #16]	; (8001490 <PCA9538_Read_Register+0x3c>)
 8001480:	f001 f830 	bl	80024e4 <HAL_I2C_Mem_Read>
 8001484:	4603      	mov	r3, r0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200004cc 	.word	0x200004cc

08001494 <PCA9538_Write_Register>:


HAL_StatusTypeDef PCA9538_Write_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af04      	add	r7, sp, #16
 800149a:	4603      	mov	r3, r0
 800149c:	603a      	str	r2, [r7, #0]
 800149e:	80fb      	strh	r3, [r7, #6]
 80014a0:	460b      	mov	r3, r1
 80014a2:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(&hi2c1, addr & 0xFFFE, reg, 1, buf, 1, 100);
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	f023 0301 	bic.w	r3, r3, #1
 80014aa:	b299      	uxth	r1, r3
 80014ac:	797b      	ldrb	r3, [r7, #5]
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	2364      	movs	r3, #100	; 0x64
 80014b2:	9302      	str	r3, [sp, #8]
 80014b4:	2301      	movs	r3, #1
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2301      	movs	r3, #1
 80014be:	4804      	ldr	r0, [pc, #16]	; (80014d0 <PCA9538_Write_Register+0x3c>)
 80014c0:	f000 ff16 	bl	80022f0 <HAL_I2C_Mem_Write>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200004cc 	.word	0x200004cc

080014d4 <PCA9538_Read_Inputs>:
	}

	return ret;
}

HAL_StatusTypeDef PCA9538_Read_Inputs(uint16_t addr, uint8_t* buf) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	80fb      	strh	r3, [r7, #6]
	return PCA9538_Read_Register(addr, INPUT_PORT, buf);
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ffb4 	bl	8001454 <PCA9538_Read_Register>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <UART_Transmit>:
#include "sdk_uart.h"
#include "usart.h"
#include <string.h>


void UART_Transmit(uint8_t data[]){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, data, strlen((const char*)data), 1000);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7fe fe65 	bl	80001d0 <strlen>
 8001506:	4603      	mov	r3, r0
 8001508:	b29a      	uxth	r2, r3
 800150a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	4803      	ldr	r0, [pc, #12]	; (8001520 <UART_Transmit+0x28>)
 8001512:	f002 ff7e 	bl	8004412 <HAL_UART_Transmit>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000684 	.word	0x20000684

08001524 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <HAL_MspInit+0x4c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <HAL_MspInit+0x4c>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001538:	6453      	str	r3, [r2, #68]	; 0x44
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <HAL_MspInit+0x4c>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_MspInit+0x4c>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_MspInit+0x4c>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_MspInit+0x4c>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800

08001574 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a19      	ldr	r2, [pc, #100]	; (80015f8 <HAL_I2C_MspInit+0x84>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d12c      	bne.n	80015f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_I2C_MspInit+0x88>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a17      	ldr	r2, [pc, #92]	; (80015fc <HAL_I2C_MspInit+0x88>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_I2C_MspInit+0x88>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b8:	2312      	movs	r3, #18
 80015ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015bc:	2301      	movs	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c4:	2304      	movs	r3, #4
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	480c      	ldr	r0, [pc, #48]	; (8001600 <HAL_I2C_MspInit+0x8c>)
 80015d0:	f000 fbae 	bl	8001d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_I2C_MspInit+0x88>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_I2C_MspInit+0x88>)
 80015de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e2:	6413      	str	r3, [r2, #64]	; 0x40
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_I2C_MspInit+0x88>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40005400 	.word	0x40005400
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020400 	.word	0x40020400

08001604 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001614:	d10d      	bne.n	8001632 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_TIM_PWM_MspInit+0x3c>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a08      	ldr	r2, [pc, #32]	; (8001640 <HAL_TIM_PWM_MspInit+0x3c>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_TIM_PWM_MspInit+0x3c>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800

08001644 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM3)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d10d      	bne.n	8001672 <HAL_TIM_OnePulse_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_TIM_OnePulse_MspInit+0x40>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	4a09      	ldr	r2, [pc, #36]	; (8001684 <HAL_TIM_OnePulse_MspInit+0x40>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <HAL_TIM_OnePulse_MspInit+0x40>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40000400 	.word	0x40000400
 8001684:	40023800 	.word	0x40023800

08001688 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a8:	d11d      	bne.n	80016e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <HAL_TIM_MspPostInit+0x68>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <HAL_TIM_MspPostInit+0x68>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <HAL_TIM_MspPostInit+0x68>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016c6:	2320      	movs	r3, #32
 80016c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016d6:	2301      	movs	r3, #1
 80016d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	4619      	mov	r1, r3
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <HAL_TIM_MspPostInit+0x6c>)
 80016e2:	f000 fb25 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	3720      	adds	r7, #32
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020000 	.word	0x40020000

080016f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a19      	ldr	r2, [pc, #100]	; (800177c <HAL_UART_MspInit+0x84>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d12b      	bne.n	8001772 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_UART_MspInit+0x88>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	4a17      	ldr	r2, [pc, #92]	; (8001780 <HAL_UART_MspInit+0x88>)
 8001724:	f043 0320 	orr.w	r3, r3, #32
 8001728:	6453      	str	r3, [r2, #68]	; 0x44
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_UART_MspInit+0x88>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f003 0320 	and.w	r3, r3, #32
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_UART_MspInit+0x88>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a10      	ldr	r2, [pc, #64]	; (8001780 <HAL_UART_MspInit+0x88>)
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <HAL_UART_MspInit+0x88>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001752:	23c0      	movs	r3, #192	; 0xc0
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001762:	2308      	movs	r3, #8
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <HAL_UART_MspInit+0x8c>)
 800176e:	f000 fadf 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001772:	bf00      	nop
 8001774:	3728      	adds	r7, #40	; 0x28
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40011400 	.word	0x40011400
 8001780:	40023800 	.word	0x40023800
 8001784:	40020800 	.word	0x40020800

08001788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800178c:	e7fe      	b.n	800178c <NMI_Handler+0x4>

0800178e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <HardFault_Handler+0x4>

08001794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <MemManage_Handler+0x4>

0800179a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <BusFault_Handler+0x4>

080017a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <UsageFault_Handler+0x4>

080017a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d4:	f000 f982 	bl	8001adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e4:	4a14      	ldr	r2, [pc, #80]	; (8001838 <_sbrk+0x5c>)
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <_sbrk+0x60>)
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <_sbrk+0x64>)
 80017fa:	4a12      	ldr	r2, [pc, #72]	; (8001844 <_sbrk+0x68>)
 80017fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	429a      	cmp	r2, r3
 800180a:	d207      	bcs.n	800181c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800180c:	f003 f8a6 	bl	800495c <__errno>
 8001810:	4603      	mov	r3, r0
 8001812:	220c      	movs	r2, #12
 8001814:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	e009      	b.n	8001830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	4a05      	ldr	r2, [pc, #20]	; (8001840 <_sbrk+0x64>)
 800182c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182e:	68fb      	ldr	r3, [r7, #12]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20020000 	.word	0x20020000
 800183c:	00000400 	.word	0x00000400
 8001840:	200004c0 	.word	0x200004c0
 8001844:	200006e0 	.word	0x200006e0

08001848 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <SystemInit+0x20>)
 800184e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <SystemInit+0x20>)
 8001854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001872:	f107 0320 	add.w	r3, r7, #32
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]
 800188a:	615a      	str	r2, [r3, #20]
 800188c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <MX_TIM2_Init+0xac>)
 8001890:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001894:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <MX_TIM2_Init+0xac>)
 8001898:	2200      	movs	r2, #0
 800189a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189c:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <MX_TIM2_Init+0xac>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <MX_TIM2_Init+0xac>)
 80018a4:	220a      	movs	r2, #10
 80018a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <MX_TIM2_Init+0xac>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <MX_TIM2_Init+0xac>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018b4:	4818      	ldr	r0, [pc, #96]	; (8001918 <MX_TIM2_Init+0xac>)
 80018b6:	f002 f90f 	bl	8003ad8 <HAL_TIM_PWM_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80018c0:	f7ff fbcc 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018cc:	f107 0320 	add.w	r3, r7, #32
 80018d0:	4619      	mov	r1, r3
 80018d2:	4811      	ldr	r0, [pc, #68]	; (8001918 <MX_TIM2_Init+0xac>)
 80018d4:	f002 fcd4 	bl	8004280 <HAL_TIMEx_MasterConfigSynchronization>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80018de:	f7ff fbbd 	bl	800105c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e2:	2360      	movs	r3, #96	; 0x60
 80018e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	2200      	movs	r2, #0
 80018f6:	4619      	mov	r1, r3
 80018f8:	4807      	ldr	r0, [pc, #28]	; (8001918 <MX_TIM2_Init+0xac>)
 80018fa:	f002 f98d 	bl	8003c18 <HAL_TIM_PWM_ConfigChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001904:	f7ff fbaa 	bl	800105c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <MX_TIM2_Init+0xac>)
 800190a:	f7ff febd 	bl	8001688 <HAL_TIM_MspPostInit>

}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2000063c 	.word	0x2000063c

0800191c <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001922:	463b      	mov	r3, r7
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <MX_TIM3_Init+0x6c>)
 800192c:	4a17      	ldr	r2, [pc, #92]	; (800198c <MX_TIM3_Init+0x70>)
 800192e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39999;
 8001930:	4b15      	ldr	r3, [pc, #84]	; (8001988 <MX_TIM3_Init+0x6c>)
 8001932:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001936:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <MX_TIM3_Init+0x6c>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <MX_TIM3_Init+0x6c>)
 8001940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001944:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <MX_TIM3_Init+0x6c>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194c:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_TIM3_Init+0x6c>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001952:	2108      	movs	r1, #8
 8001954:	480c      	ldr	r0, [pc, #48]	; (8001988 <MX_TIM3_Init+0x6c>)
 8001956:	f002 f90e 	bl	8003b76 <HAL_TIM_OnePulse_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM3_Init+0x48>
  {
    Error_Handler();
 8001960:	f7ff fb7c 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800196c:	463b      	mov	r3, r7
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_TIM3_Init+0x6c>)
 8001972:	f002 fc85 	bl	8004280 <HAL_TIMEx_MasterConfigSynchronization>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800197c:	f7ff fb6e 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200005f4 	.word	0x200005f4
 800198c:	40000400 	.word	0x40000400

08001990 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <MX_USART6_UART_Init+0x4c>)
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <MX_USART6_UART_Init+0x50>)
 8001998:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <MX_USART6_UART_Init+0x4c>)
 800199c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <MX_USART6_UART_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <MX_USART6_UART_Init+0x4c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <MX_USART6_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <MX_USART6_UART_Init+0x4c>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <MX_USART6_UART_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <MX_USART6_UART_Init+0x4c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_USART6_UART_Init+0x4c>)
 80019c8:	f002 fcd6 	bl	8004378 <HAL_UART_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80019d2:	f7ff fb43 	bl	800105c <Error_Handler>
  }

}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000684 	.word	0x20000684
 80019e0:	40011400 	.word	0x40011400

080019e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ea:	490e      	ldr	r1, [pc, #56]	; (8001a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a00:	4c0b      	ldr	r4, [pc, #44]	; (8001a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a0e:	f7ff ff1b 	bl	8001848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a12:	f002 ffa9 	bl	8004968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a16:	f7fe ff83 	bl	8000920 <main>
  bx  lr    
 8001a1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a24:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001a28:	08007b00 	.word	0x08007b00
  ldr r2, =_sbss
 8001a2c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001a30:	200006dc 	.word	0x200006dc

08001a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC_IRQHandler>
	...

08001a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <HAL_Init+0x40>)
 8001a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_Init+0x40>)
 8001a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_Init+0x40>)
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 f931 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f000 f808 	bl	8001a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fd5a 	bl	8001524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x54>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_InitTick+0x58>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f93b 	bl	8001d16 <HAL_SYSTICK_Config>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00e      	b.n	8001ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d80a      	bhi.n	8001ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f000 f911 	bl	8001cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001abc:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <HAL_InitTick+0x5c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000028 	.word	0x20000028
 8001ad4:	20000030 	.word	0x20000030
 8001ad8:	2000002c 	.word	0x2000002c

08001adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_IncTick+0x20>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_IncTick+0x24>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_IncTick+0x24>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000030 	.word	0x20000030
 8001b00:	200006c8 	.word	0x200006c8

08001b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_GetTick+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	200006c8 	.word	0x200006c8

08001b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff ffee 	bl	8001b04 <HAL_GetTick>
 8001b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d005      	beq.n	8001b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_Delay+0x44>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b42:	bf00      	nop
 8001b44:	f7ff ffde 	bl	8001b04 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d8f7      	bhi.n	8001b44 <HAL_Delay+0x28>
  {
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000030 	.word	0x20000030

08001b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b80:	4013      	ands	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b96:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60d3      	str	r3, [r2, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0307 	and.w	r3, r3, #7
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff47 	bl	8001b64 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf0:	f7ff ff5c 	bl	8001bac <__NVIC_GetPriorityGrouping>
 8001cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6978      	ldr	r0, [r7, #20]
 8001cfc:	f7ff ff8e 	bl	8001c1c <NVIC_EncodePriority>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff5d 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffb0 	bl	8001c84 <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	e16b      	b.n	8002024 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	f040 815a 	bne.w	800201e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d005      	beq.n	8001d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d130      	bne.n	8001de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db8:	2201      	movs	r2, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 0201 	and.w	r2, r3, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d017      	beq.n	8001e20 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d123      	bne.n	8001e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	08da      	lsrs	r2, r3, #3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3208      	adds	r2, #8
 8001e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	220f      	movs	r2, #15
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	08da      	lsrs	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	69b9      	ldr	r1, [r7, #24]
 8001e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0203 	and.w	r2, r3, #3
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 80b4 	beq.w	800201e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b60      	ldr	r3, [pc, #384]	; (800203c <HAL_GPIO_Init+0x30c>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a5f      	ldr	r2, [pc, #380]	; (800203c <HAL_GPIO_Init+0x30c>)
 8001ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	4b5d      	ldr	r3, [pc, #372]	; (800203c <HAL_GPIO_Init+0x30c>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ed2:	4a5b      	ldr	r2, [pc, #364]	; (8002040 <HAL_GPIO_Init+0x310>)
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	089b      	lsrs	r3, r3, #2
 8001ed8:	3302      	adds	r3, #2
 8001eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	220f      	movs	r2, #15
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a52      	ldr	r2, [pc, #328]	; (8002044 <HAL_GPIO_Init+0x314>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d02b      	beq.n	8001f56 <HAL_GPIO_Init+0x226>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a51      	ldr	r2, [pc, #324]	; (8002048 <HAL_GPIO_Init+0x318>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d025      	beq.n	8001f52 <HAL_GPIO_Init+0x222>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a50      	ldr	r2, [pc, #320]	; (800204c <HAL_GPIO_Init+0x31c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01f      	beq.n	8001f4e <HAL_GPIO_Init+0x21e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4f      	ldr	r2, [pc, #316]	; (8002050 <HAL_GPIO_Init+0x320>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d019      	beq.n	8001f4a <HAL_GPIO_Init+0x21a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4e      	ldr	r2, [pc, #312]	; (8002054 <HAL_GPIO_Init+0x324>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_GPIO_Init+0x216>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4d      	ldr	r2, [pc, #308]	; (8002058 <HAL_GPIO_Init+0x328>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00d      	beq.n	8001f42 <HAL_GPIO_Init+0x212>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4c      	ldr	r2, [pc, #304]	; (800205c <HAL_GPIO_Init+0x32c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <HAL_GPIO_Init+0x20e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4b      	ldr	r2, [pc, #300]	; (8002060 <HAL_GPIO_Init+0x330>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_GPIO_Init+0x20a>
 8001f36:	2307      	movs	r3, #7
 8001f38:	e00e      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f3a:	2308      	movs	r3, #8
 8001f3c:	e00c      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f3e:	2306      	movs	r3, #6
 8001f40:	e00a      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f42:	2305      	movs	r3, #5
 8001f44:	e008      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f46:	2304      	movs	r3, #4
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e004      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e002      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f56:	2300      	movs	r3, #0
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	f002 0203 	and.w	r2, r2, #3
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4093      	lsls	r3, r2
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f68:	4935      	ldr	r1, [pc, #212]	; (8002040 <HAL_GPIO_Init+0x310>)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f76:	4b3b      	ldr	r3, [pc, #236]	; (8002064 <HAL_GPIO_Init+0x334>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f9a:	4a32      	ldr	r2, [pc, #200]	; (8002064 <HAL_GPIO_Init+0x334>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fa0:	4b30      	ldr	r3, [pc, #192]	; (8002064 <HAL_GPIO_Init+0x334>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fc4:	4a27      	ldr	r2, [pc, #156]	; (8002064 <HAL_GPIO_Init+0x334>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <HAL_GPIO_Init+0x334>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fee:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <HAL_GPIO_Init+0x334>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <HAL_GPIO_Init+0x334>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002018:	4a12      	ldr	r2, [pc, #72]	; (8002064 <HAL_GPIO_Init+0x334>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b0f      	cmp	r3, #15
 8002028:	f67f ae90 	bls.w	8001d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3724      	adds	r7, #36	; 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	40013800 	.word	0x40013800
 8002044:	40020000 	.word	0x40020000
 8002048:	40020400 	.word	0x40020400
 800204c:	40020800 	.word	0x40020800
 8002050:	40020c00 	.word	0x40020c00
 8002054:	40021000 	.word	0x40021000
 8002058:	40021400 	.word	0x40021400
 800205c:	40021800 	.word	0x40021800
 8002060:	40021c00 	.word	0x40021c00
 8002064:	40013c00 	.word	0x40013c00

08002068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e12b      	b.n	80022d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff fa70 	bl	8001574 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2224      	movs	r2, #36	; 0x24
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020cc:	f001 fbac 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 80020d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4a81      	ldr	r2, [pc, #516]	; (80022dc <HAL_I2C_Init+0x274>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d807      	bhi.n	80020ec <HAL_I2C_Init+0x84>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4a80      	ldr	r2, [pc, #512]	; (80022e0 <HAL_I2C_Init+0x278>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	bf94      	ite	ls
 80020e4:	2301      	movls	r3, #1
 80020e6:	2300      	movhi	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	e006      	b.n	80020fa <HAL_I2C_Init+0x92>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a7d      	ldr	r2, [pc, #500]	; (80022e4 <HAL_I2C_Init+0x27c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	bf94      	ite	ls
 80020f4:	2301      	movls	r3, #1
 80020f6:	2300      	movhi	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0e7      	b.n	80022d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4a78      	ldr	r2, [pc, #480]	; (80022e8 <HAL_I2C_Init+0x280>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0c9b      	lsrs	r3, r3, #18
 800210c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	430a      	orrs	r2, r1
 8002120:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a6a      	ldr	r2, [pc, #424]	; (80022dc <HAL_I2C_Init+0x274>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d802      	bhi.n	800213c <HAL_I2C_Init+0xd4>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	3301      	adds	r3, #1
 800213a:	e009      	b.n	8002150 <HAL_I2C_Init+0xe8>
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	4a69      	ldr	r2, [pc, #420]	; (80022ec <HAL_I2C_Init+0x284>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	3301      	adds	r3, #1
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	430b      	orrs	r3, r1
 8002156:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002162:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	495c      	ldr	r1, [pc, #368]	; (80022dc <HAL_I2C_Init+0x274>)
 800216c:	428b      	cmp	r3, r1
 800216e:	d819      	bhi.n	80021a4 <HAL_I2C_Init+0x13c>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1e59      	subs	r1, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	fbb1 f3f3 	udiv	r3, r1, r3
 800217e:	1c59      	adds	r1, r3, #1
 8002180:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002184:	400b      	ands	r3, r1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_I2C_Init+0x138>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1e59      	subs	r1, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fbb1 f3f3 	udiv	r3, r1, r3
 8002198:	3301      	adds	r3, #1
 800219a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219e:	e051      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 80021a0:	2304      	movs	r3, #4
 80021a2:	e04f      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d111      	bne.n	80021d0 <HAL_I2C_Init+0x168>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1e58      	subs	r0, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	440b      	add	r3, r1
 80021ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80021be:	3301      	adds	r3, #1
 80021c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	e012      	b.n	80021f6 <HAL_I2C_Init+0x18e>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1e58      	subs	r0, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	0099      	lsls	r1, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Init+0x196>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e022      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10e      	bne.n	8002224 <HAL_I2C_Init+0x1bc>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1e58      	subs	r0, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	460b      	mov	r3, r1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	440b      	add	r3, r1
 8002214:	fbb0 f3f3 	udiv	r3, r0, r3
 8002218:	3301      	adds	r3, #1
 800221a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800221e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002222:	e00f      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1e58      	subs	r0, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	0099      	lsls	r1, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	fbb0 f3f3 	udiv	r3, r0, r3
 800223a:	3301      	adds	r3, #1
 800223c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002240:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	6809      	ldr	r1, [r1, #0]
 8002248:	4313      	orrs	r3, r2
 800224a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002272:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6911      	ldr	r1, [r2, #16]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68d2      	ldr	r2, [r2, #12]
 800227e:	4311      	orrs	r1, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	430b      	orrs	r3, r1
 8002286:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2220      	movs	r2, #32
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	000186a0 	.word	0x000186a0
 80022e0:	001e847f 	.word	0x001e847f
 80022e4:	003d08ff 	.word	0x003d08ff
 80022e8:	431bde83 	.word	0x431bde83
 80022ec:	10624dd3 	.word	0x10624dd3

080022f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	4608      	mov	r0, r1
 80022fa:	4611      	mov	r1, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	4603      	mov	r3, r0
 8002300:	817b      	strh	r3, [r7, #10]
 8002302:	460b      	mov	r3, r1
 8002304:	813b      	strh	r3, [r7, #8]
 8002306:	4613      	mov	r3, r2
 8002308:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800230a:	f7ff fbfb 	bl	8001b04 <HAL_GetTick>
 800230e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b20      	cmp	r3, #32
 800231a:	f040 80d9 	bne.w	80024d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2319      	movs	r3, #25
 8002324:	2201      	movs	r2, #1
 8002326:	496d      	ldr	r1, [pc, #436]	; (80024dc <HAL_I2C_Mem_Write+0x1ec>)
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 fc7f 	bl	8002c2c <I2C_WaitOnFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002334:	2302      	movs	r3, #2
 8002336:	e0cc      	b.n	80024d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_I2C_Mem_Write+0x56>
 8002342:	2302      	movs	r3, #2
 8002344:	e0c5      	b.n	80024d2 <HAL_I2C_Mem_Write+0x1e2>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b01      	cmp	r3, #1
 800235a:	d007      	beq.n	800236c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800237a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2221      	movs	r2, #33	; 0x21
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2240      	movs	r2, #64	; 0x40
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a3a      	ldr	r2, [r7, #32]
 8002396:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800239c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4a4d      	ldr	r2, [pc, #308]	; (80024e0 <HAL_I2C_Mem_Write+0x1f0>)
 80023ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ae:	88f8      	ldrh	r0, [r7, #6]
 80023b0:	893a      	ldrh	r2, [r7, #8]
 80023b2:	8979      	ldrh	r1, [r7, #10]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	4603      	mov	r3, r0
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 fab6 	bl	8002930 <I2C_RequestMemoryWrite>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d052      	beq.n	8002470 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e081      	b.n	80024d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fd00 	bl	8002dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00d      	beq.n	80023fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d107      	bne.n	80023f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e06b      	b.n	80024d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	781a      	ldrb	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b04      	cmp	r3, #4
 8002436:	d11b      	bne.n	8002470 <HAL_I2C_Mem_Write+0x180>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243c:	2b00      	cmp	r3, #0
 800243e:	d017      	beq.n	8002470 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	781a      	ldrb	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245a:	3b01      	subs	r3, #1
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002466:	b29b      	uxth	r3, r3
 8002468:	3b01      	subs	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1aa      	bne.n	80023ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 fcec 	bl	8002e5a <I2C_WaitOnBTFFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00d      	beq.n	80024a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	2b04      	cmp	r3, #4
 800248e:	d107      	bne.n	80024a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800249e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e016      	b.n	80024d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e000      	b.n	80024d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80024d0:	2302      	movs	r3, #2
  }
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	00100002 	.word	0x00100002
 80024e0:	ffff0000 	.word	0xffff0000

080024e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08c      	sub	sp, #48	; 0x30
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	4608      	mov	r0, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	461a      	mov	r2, r3
 80024f2:	4603      	mov	r3, r0
 80024f4:	817b      	strh	r3, [r7, #10]
 80024f6:	460b      	mov	r3, r1
 80024f8:	813b      	strh	r3, [r7, #8]
 80024fa:	4613      	mov	r3, r2
 80024fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024fe:	f7ff fb01 	bl	8001b04 <HAL_GetTick>
 8002502:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b20      	cmp	r3, #32
 800250e:	f040 8208 	bne.w	8002922 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	2319      	movs	r3, #25
 8002518:	2201      	movs	r2, #1
 800251a:	497b      	ldr	r1, [pc, #492]	; (8002708 <HAL_I2C_Mem_Read+0x224>)
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 fb85 	bl	8002c2c <I2C_WaitOnFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002528:	2302      	movs	r3, #2
 800252a:	e1fb      	b.n	8002924 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_I2C_Mem_Read+0x56>
 8002536:	2302      	movs	r3, #2
 8002538:	e1f4      	b.n	8002924 <HAL_I2C_Mem_Read+0x440>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b01      	cmp	r3, #1
 800254e:	d007      	beq.n	8002560 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800256e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2222      	movs	r2, #34	; 0x22
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2240      	movs	r2, #64	; 0x40
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800258a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002590:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4a5b      	ldr	r2, [pc, #364]	; (800270c <HAL_I2C_Mem_Read+0x228>)
 80025a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025a2:	88f8      	ldrh	r0, [r7, #6]
 80025a4:	893a      	ldrh	r2, [r7, #8]
 80025a6:	8979      	ldrh	r1, [r7, #10]
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	4603      	mov	r3, r0
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 fa52 	bl	8002a5c <I2C_RequestMemoryRead>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e1b0      	b.n	8002924 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d113      	bne.n	80025f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ca:	2300      	movs	r3, #0
 80025cc:	623b      	str	r3, [r7, #32]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	623b      	str	r3, [r7, #32]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	623b      	str	r3, [r7, #32]
 80025de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	e184      	b.n	80028fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d11b      	bne.n	8002632 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002608:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	e164      	b.n	80028fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002636:	2b02      	cmp	r3, #2
 8002638:	d11b      	bne.n	8002672 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002648:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002658:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	e144      	b.n	80028fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002688:	e138      	b.n	80028fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268e:	2b03      	cmp	r3, #3
 8002690:	f200 80f1 	bhi.w	8002876 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002698:	2b01      	cmp	r3, #1
 800269a:	d123      	bne.n	80026e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 fc1b 	bl	8002edc <I2C_WaitOnRXNEFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e139      	b.n	8002924 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026e2:	e10b      	b.n	80028fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d14e      	bne.n	800278a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f2:	2200      	movs	r2, #0
 80026f4:	4906      	ldr	r1, [pc, #24]	; (8002710 <HAL_I2C_Mem_Read+0x22c>)
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fa98 	bl	8002c2c <I2C_WaitOnFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d008      	beq.n	8002714 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e10e      	b.n	8002924 <HAL_I2C_Mem_Read+0x440>
 8002706:	bf00      	nop
 8002708:	00100002 	.word	0x00100002
 800270c:	ffff0000 	.word	0xffff0000
 8002710:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277e:	b29b      	uxth	r3, r3
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002788:	e0b8      	b.n	80028fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002790:	2200      	movs	r2, #0
 8002792:	4966      	ldr	r1, [pc, #408]	; (800292c <HAL_I2C_Mem_Read+0x448>)
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 fa49 	bl	8002c2c <I2C_WaitOnFlagUntilTimeout>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0bf      	b.n	8002924 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ec:	2200      	movs	r2, #0
 80027ee:	494f      	ldr	r1, [pc, #316]	; (800292c <HAL_I2C_Mem_Read+0x448>)
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fa1b 	bl	8002c2c <I2C_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e091      	b.n	8002924 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800280e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002874:	e042      	b.n	80028fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002878:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 fb2e 	bl	8002edc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e04c      	b.n	8002924 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d118      	bne.n	80028fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002900:	2b00      	cmp	r3, #0
 8002902:	f47f aec2 	bne.w	800268a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	e000      	b.n	8002924 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002922:	2302      	movs	r3, #2
  }
}
 8002924:	4618      	mov	r0, r3
 8002926:	3728      	adds	r7, #40	; 0x28
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	00010004 	.word	0x00010004

08002930 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	4608      	mov	r0, r1
 800293a:	4611      	mov	r1, r2
 800293c:	461a      	mov	r2, r3
 800293e:	4603      	mov	r3, r0
 8002940:	817b      	strh	r3, [r7, #10]
 8002942:	460b      	mov	r3, r1
 8002944:	813b      	strh	r3, [r7, #8]
 8002946:	4613      	mov	r3, r2
 8002948:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002958:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	2200      	movs	r2, #0
 8002962:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f960 	bl	8002c2c <I2C_WaitOnFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00d      	beq.n	800298e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002980:	d103      	bne.n	800298a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e05f      	b.n	8002a4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800298e:	897b      	ldrh	r3, [r7, #10]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800299c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	6a3a      	ldr	r2, [r7, #32]
 80029a2:	492d      	ldr	r1, [pc, #180]	; (8002a58 <I2C_RequestMemoryWrite+0x128>)
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 f998 	bl	8002cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e04c      	b.n	8002a4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029cc:	6a39      	ldr	r1, [r7, #32]
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fa02 	bl	8002dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00d      	beq.n	80029f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d107      	bne.n	80029f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e02b      	b.n	8002a4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d105      	bne.n	8002a08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029fc:	893b      	ldrh	r3, [r7, #8]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	611a      	str	r2, [r3, #16]
 8002a06:	e021      	b.n	8002a4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a08:	893b      	ldrh	r3, [r7, #8]
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a18:	6a39      	ldr	r1, [r7, #32]
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f9dc 	bl	8002dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00d      	beq.n	8002a42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d107      	bne.n	8002a3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e005      	b.n	8002a4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a42:	893b      	ldrh	r3, [r7, #8]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	00010002 	.word	0x00010002

08002a5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	4608      	mov	r0, r1
 8002a66:	4611      	mov	r1, r2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	817b      	strh	r3, [r7, #10]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	813b      	strh	r3, [r7, #8]
 8002a72:	4613      	mov	r3, r2
 8002a74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f8c2 	bl	8002c2c <I2C_WaitOnFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00d      	beq.n	8002aca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002abc:	d103      	bne.n	8002ac6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e0aa      	b.n	8002c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aca:	897b      	ldrh	r3, [r7, #10]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ad8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	6a3a      	ldr	r2, [r7, #32]
 8002ade:	4952      	ldr	r1, [pc, #328]	; (8002c28 <I2C_RequestMemoryRead+0x1cc>)
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f8fa 	bl	8002cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e097      	b.n	8002c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b08:	6a39      	ldr	r1, [r7, #32]
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f964 	bl	8002dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00d      	beq.n	8002b32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d107      	bne.n	8002b2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e076      	b.n	8002c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d105      	bne.n	8002b44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b38:	893b      	ldrh	r3, [r7, #8]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	611a      	str	r2, [r3, #16]
 8002b42:	e021      	b.n	8002b88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b44:	893b      	ldrh	r3, [r7, #8]
 8002b46:	0a1b      	lsrs	r3, r3, #8
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b54:	6a39      	ldr	r1, [r7, #32]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f93e 	bl	8002dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00d      	beq.n	8002b7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d107      	bne.n	8002b7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e050      	b.n	8002c20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b7e:	893b      	ldrh	r3, [r7, #8]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8a:	6a39      	ldr	r1, [r7, #32]
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f923 	bl	8002dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00d      	beq.n	8002bb4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d107      	bne.n	8002bb0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e035      	b.n	8002c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f82b 	bl	8002c2c <I2C_WaitOnFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00d      	beq.n	8002bf8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bea:	d103      	bne.n	8002bf4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e013      	b.n	8002c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bf8:	897b      	ldrh	r3, [r7, #10]
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	6a3a      	ldr	r2, [r7, #32]
 8002c0c:	4906      	ldr	r1, [pc, #24]	; (8002c28 <I2C_RequestMemoryRead+0x1cc>)
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f863 	bl	8002cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	00010002 	.word	0x00010002

08002c2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c3c:	e025      	b.n	8002c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c44:	d021      	beq.n	8002c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c46:	f7fe ff5d 	bl	8001b04 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d302      	bcc.n	8002c5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d116      	bne.n	8002c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f043 0220 	orr.w	r2, r3, #32
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e023      	b.n	8002cd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d10d      	bne.n	8002cb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	43da      	mvns	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	bf0c      	ite	eq
 8002ca6:	2301      	moveq	r3, #1
 8002ca8:	2300      	movne	r3, #0
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	461a      	mov	r2, r3
 8002cae:	e00c      	b.n	8002cca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	bf0c      	ite	eq
 8002cc2:	2301      	moveq	r3, #1
 8002cc4:	2300      	movne	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	461a      	mov	r2, r3
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d0b6      	beq.n	8002c3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ce8:	e051      	b.n	8002d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf8:	d123      	bne.n	8002d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f043 0204 	orr.w	r2, r3, #4
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e046      	b.n	8002dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d48:	d021      	beq.n	8002d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4a:	f7fe fedb 	bl	8001b04 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d302      	bcc.n	8002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d116      	bne.n	8002d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f043 0220 	orr.w	r2, r3, #32
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e020      	b.n	8002dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d10c      	bne.n	8002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	4013      	ands	r3, r2
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	bf14      	ite	ne
 8002daa:	2301      	movne	r3, #1
 8002dac:	2300      	moveq	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	e00b      	b.n	8002dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	43da      	mvns	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bf14      	ite	ne
 8002dc4:	2301      	movne	r3, #1
 8002dc6:	2300      	moveq	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d18d      	bne.n	8002cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002de4:	e02d      	b.n	8002e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f8ce 	bl	8002f88 <I2C_IsAcknowledgeFailed>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e02d      	b.n	8002e52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfc:	d021      	beq.n	8002e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfe:	f7fe fe81 	bl	8001b04 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d302      	bcc.n	8002e14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d116      	bne.n	8002e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f043 0220 	orr.w	r2, r3, #32
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e007      	b.n	8002e52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4c:	2b80      	cmp	r3, #128	; 0x80
 8002e4e:	d1ca      	bne.n	8002de6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e66:	e02d      	b.n	8002ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f88d 	bl	8002f88 <I2C_IsAcknowledgeFailed>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e02d      	b.n	8002ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7e:	d021      	beq.n	8002ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e80:	f7fe fe40 	bl	8001b04 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d302      	bcc.n	8002e96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d116      	bne.n	8002ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	f043 0220 	orr.w	r2, r3, #32
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e007      	b.n	8002ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d1ca      	bne.n	8002e68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ee8:	e042      	b.n	8002f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b10      	cmp	r3, #16
 8002ef6:	d119      	bne.n	8002f2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0210 	mvn.w	r2, #16
 8002f00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e029      	b.n	8002f80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2c:	f7fe fdea 	bl	8001b04 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d302      	bcc.n	8002f42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d116      	bne.n	8002f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	f043 0220 	orr.w	r2, r3, #32
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e007      	b.n	8002f80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7a:	2b40      	cmp	r3, #64	; 0x40
 8002f7c:	d1b5      	bne.n	8002eea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9e:	d11b      	bne.n	8002fd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fa8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	f043 0204 	orr.w	r2, r3, #4
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e264      	b.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d075      	beq.n	80030f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003006:	4ba3      	ldr	r3, [pc, #652]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b04      	cmp	r3, #4
 8003010:	d00c      	beq.n	800302c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003012:	4ba0      	ldr	r3, [pc, #640]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800301a:	2b08      	cmp	r3, #8
 800301c:	d112      	bne.n	8003044 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301e:	4b9d      	ldr	r3, [pc, #628]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800302a:	d10b      	bne.n	8003044 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	4b99      	ldr	r3, [pc, #612]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d05b      	beq.n	80030f0 <HAL_RCC_OscConfig+0x108>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d157      	bne.n	80030f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e23f      	b.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304c:	d106      	bne.n	800305c <HAL_RCC_OscConfig+0x74>
 800304e:	4b91      	ldr	r3, [pc, #580]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a90      	ldr	r2, [pc, #576]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 8003054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	e01d      	b.n	8003098 <HAL_RCC_OscConfig+0xb0>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003064:	d10c      	bne.n	8003080 <HAL_RCC_OscConfig+0x98>
 8003066:	4b8b      	ldr	r3, [pc, #556]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a8a      	ldr	r2, [pc, #552]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 800306c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b88      	ldr	r3, [pc, #544]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a87      	ldr	r2, [pc, #540]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e00b      	b.n	8003098 <HAL_RCC_OscConfig+0xb0>
 8003080:	4b84      	ldr	r3, [pc, #528]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a83      	ldr	r2, [pc, #524]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 8003086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	4b81      	ldr	r3, [pc, #516]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a80      	ldr	r2, [pc, #512]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 8003092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d013      	beq.n	80030c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fe fd30 	bl	8001b04 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a8:	f7fe fd2c 	bl	8001b04 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	; 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e204      	b.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ba:	4b76      	ldr	r3, [pc, #472]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0xc0>
 80030c6:	e014      	b.n	80030f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fe fd1c 	bl	8001b04 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d0:	f7fe fd18 	bl	8001b04 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	; 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e1f0      	b.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e2:	4b6c      	ldr	r3, [pc, #432]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0xe8>
 80030ee:	e000      	b.n	80030f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d063      	beq.n	80031c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030fe:	4b65      	ldr	r3, [pc, #404]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310a:	4b62      	ldr	r3, [pc, #392]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003112:	2b08      	cmp	r3, #8
 8003114:	d11c      	bne.n	8003150 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003116:	4b5f      	ldr	r3, [pc, #380]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d116      	bne.n	8003150 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003122:	4b5c      	ldr	r3, [pc, #368]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d005      	beq.n	800313a <HAL_RCC_OscConfig+0x152>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e1c4      	b.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313a:	4b56      	ldr	r3, [pc, #344]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4952      	ldr	r1, [pc, #328]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314e:	e03a      	b.n	80031c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d020      	beq.n	800319a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003158:	4b4f      	ldr	r3, [pc, #316]	; (8003298 <HAL_RCC_OscConfig+0x2b0>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f7fe fcd1 	bl	8001b04 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003166:	f7fe fccd 	bl	8001b04 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e1a5      	b.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003178:	4b46      	ldr	r3, [pc, #280]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003184:	4b43      	ldr	r3, [pc, #268]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4940      	ldr	r1, [pc, #256]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
 8003198:	e015      	b.n	80031c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319a:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <HAL_RCC_OscConfig+0x2b0>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fe fcb0 	bl	8001b04 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a8:	f7fe fcac 	bl	8001b04 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e184      	b.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ba:	4b36      	ldr	r3, [pc, #216]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d030      	beq.n	8003234 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d016      	beq.n	8003208 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031da:	4b30      	ldr	r3, [pc, #192]	; (800329c <HAL_RCC_OscConfig+0x2b4>)
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7fe fc90 	bl	8001b04 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e8:	f7fe fc8c 	bl	8001b04 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e164      	b.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fa:	4b26      	ldr	r3, [pc, #152]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x200>
 8003206:	e015      	b.n	8003234 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003208:	4b24      	ldr	r3, [pc, #144]	; (800329c <HAL_RCC_OscConfig+0x2b4>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320e:	f7fe fc79 	bl	8001b04 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003216:	f7fe fc75 	bl	8001b04 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e14d      	b.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003228:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 800322a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80a0 	beq.w	8003382 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003242:	2300      	movs	r3, #0
 8003244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003246:	4b13      	ldr	r3, [pc, #76]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10f      	bne.n	8003272 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	4a0e      	ldr	r2, [pc, #56]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 800325c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003260:	6413      	str	r3, [r2, #64]	; 0x40
 8003262:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <HAL_RCC_OscConfig+0x2ac>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800326e:	2301      	movs	r3, #1
 8003270:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003272:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_RCC_OscConfig+0x2b8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d121      	bne.n	80032c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800327e:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <HAL_RCC_OscConfig+0x2b8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a07      	ldr	r2, [pc, #28]	; (80032a0 <HAL_RCC_OscConfig+0x2b8>)
 8003284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800328a:	f7fe fc3b 	bl	8001b04 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003290:	e011      	b.n	80032b6 <HAL_RCC_OscConfig+0x2ce>
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800
 8003298:	42470000 	.word	0x42470000
 800329c:	42470e80 	.word	0x42470e80
 80032a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a4:	f7fe fc2e 	bl	8001b04 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e106      	b.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b6:	4b85      	ldr	r3, [pc, #532]	; (80034cc <HAL_RCC_OscConfig+0x4e4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d106      	bne.n	80032d8 <HAL_RCC_OscConfig+0x2f0>
 80032ca:	4b81      	ldr	r3, [pc, #516]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 80032cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ce:	4a80      	ldr	r2, [pc, #512]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6713      	str	r3, [r2, #112]	; 0x70
 80032d6:	e01c      	b.n	8003312 <HAL_RCC_OscConfig+0x32a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b05      	cmp	r3, #5
 80032de:	d10c      	bne.n	80032fa <HAL_RCC_OscConfig+0x312>
 80032e0:	4b7b      	ldr	r3, [pc, #492]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e4:	4a7a      	ldr	r2, [pc, #488]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 80032e6:	f043 0304 	orr.w	r3, r3, #4
 80032ea:	6713      	str	r3, [r2, #112]	; 0x70
 80032ec:	4b78      	ldr	r3, [pc, #480]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	4a77      	ldr	r2, [pc, #476]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	6713      	str	r3, [r2, #112]	; 0x70
 80032f8:	e00b      	b.n	8003312 <HAL_RCC_OscConfig+0x32a>
 80032fa:	4b75      	ldr	r3, [pc, #468]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a74      	ldr	r2, [pc, #464]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 8003300:	f023 0301 	bic.w	r3, r3, #1
 8003304:	6713      	str	r3, [r2, #112]	; 0x70
 8003306:	4b72      	ldr	r3, [pc, #456]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	4a71      	ldr	r2, [pc, #452]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 800330c:	f023 0304 	bic.w	r3, r3, #4
 8003310:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d015      	beq.n	8003346 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331a:	f7fe fbf3 	bl	8001b04 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003320:	e00a      	b.n	8003338 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003322:	f7fe fbef 	bl	8001b04 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003330:	4293      	cmp	r3, r2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e0c5      	b.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003338:	4b65      	ldr	r3, [pc, #404]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0ee      	beq.n	8003322 <HAL_RCC_OscConfig+0x33a>
 8003344:	e014      	b.n	8003370 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003346:	f7fe fbdd 	bl	8001b04 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334c:	e00a      	b.n	8003364 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334e:	f7fe fbd9 	bl	8001b04 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	f241 3288 	movw	r2, #5000	; 0x1388
 800335c:	4293      	cmp	r3, r2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e0af      	b.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003364:	4b5a      	ldr	r3, [pc, #360]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1ee      	bne.n	800334e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003370:	7dfb      	ldrb	r3, [r7, #23]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d105      	bne.n	8003382 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003376:	4b56      	ldr	r3, [pc, #344]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	4a55      	ldr	r2, [pc, #340]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 800337c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003380:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 809b 	beq.w	80034c2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800338c:	4b50      	ldr	r3, [pc, #320]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 030c 	and.w	r3, r3, #12
 8003394:	2b08      	cmp	r3, #8
 8003396:	d05c      	beq.n	8003452 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d141      	bne.n	8003424 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a0:	4b4c      	ldr	r3, [pc, #304]	; (80034d4 <HAL_RCC_OscConfig+0x4ec>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a6:	f7fe fbad 	bl	8001b04 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ae:	f7fe fba9 	bl	8001b04 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e081      	b.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c0:	4b43      	ldr	r3, [pc, #268]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1f0      	bne.n	80033ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69da      	ldr	r2, [r3, #28]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	019b      	lsls	r3, r3, #6
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	3b01      	subs	r3, #1
 80033e6:	041b      	lsls	r3, r3, #16
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	061b      	lsls	r3, r3, #24
 80033f0:	4937      	ldr	r1, [pc, #220]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f6:	4b37      	ldr	r3, [pc, #220]	; (80034d4 <HAL_RCC_OscConfig+0x4ec>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fe fb82 	bl	8001b04 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003404:	f7fe fb7e 	bl	8001b04 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e056      	b.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003416:	4b2e      	ldr	r3, [pc, #184]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x41c>
 8003422:	e04e      	b.n	80034c2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003424:	4b2b      	ldr	r3, [pc, #172]	; (80034d4 <HAL_RCC_OscConfig+0x4ec>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342a:	f7fe fb6b 	bl	8001b04 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003432:	f7fe fb67 	bl	8001b04 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e03f      	b.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003444:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f0      	bne.n	8003432 <HAL_RCC_OscConfig+0x44a>
 8003450:	e037      	b.n	80034c2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e032      	b.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800345e:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <HAL_RCC_OscConfig+0x4e8>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d028      	beq.n	80034be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d121      	bne.n	80034be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d11a      	bne.n	80034be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800348e:	4013      	ands	r3, r2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003494:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003496:	4293      	cmp	r3, r2
 8003498:	d111      	bne.n	80034be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	085b      	lsrs	r3, r3, #1
 80034a6:	3b01      	subs	r3, #1
 80034a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d107      	bne.n	80034be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40007000 	.word	0x40007000
 80034d0:	40023800 	.word	0x40023800
 80034d4:	42470060 	.word	0x42470060

080034d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0cc      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034ec:	4b68      	ldr	r3, [pc, #416]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d90c      	bls.n	8003514 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fa:	4b65      	ldr	r3, [pc, #404]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b63      	ldr	r3, [pc, #396]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0b8      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d020      	beq.n	8003562 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800352c:	4b59      	ldr	r3, [pc, #356]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a58      	ldr	r2, [pc, #352]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003536:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003544:	4b53      	ldr	r3, [pc, #332]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a52      	ldr	r2, [pc, #328]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800354e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003550:	4b50      	ldr	r3, [pc, #320]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	494d      	ldr	r1, [pc, #308]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	4313      	orrs	r3, r2
 8003560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d044      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d107      	bne.n	8003586 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	4b47      	ldr	r3, [pc, #284]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d119      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e07f      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d003      	beq.n	8003596 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003592:	2b03      	cmp	r3, #3
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003596:	4b3f      	ldr	r3, [pc, #252]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e06f      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a6:	4b3b      	ldr	r3, [pc, #236]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e067      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035b6:	4b37      	ldr	r3, [pc, #220]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f023 0203 	bic.w	r2, r3, #3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4934      	ldr	r1, [pc, #208]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c8:	f7fe fa9c 	bl	8001b04 <HAL_GetTick>
 80035cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d0:	f7fe fa98 	bl	8001b04 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	; 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e04f      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e6:	4b2b      	ldr	r3, [pc, #172]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 020c 	and.w	r2, r3, #12
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d1eb      	bne.n	80035d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f8:	4b25      	ldr	r3, [pc, #148]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d20c      	bcs.n	8003620 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003606:	4b22      	ldr	r3, [pc, #136]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b20      	ldr	r3, [pc, #128]	; (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e032      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800362c:	4b19      	ldr	r3, [pc, #100]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4916      	ldr	r1, [pc, #88]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800364a:	4b12      	ldr	r3, [pc, #72]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	490e      	ldr	r1, [pc, #56]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800365e:	f000 f821 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8003662:	4602      	mov	r2, r0
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	490a      	ldr	r1, [pc, #40]	; (8003698 <HAL_RCC_ClockConfig+0x1c0>)
 8003670:	5ccb      	ldrb	r3, [r1, r3]
 8003672:	fa22 f303 	lsr.w	r3, r2, r3
 8003676:	4a09      	ldr	r2, [pc, #36]	; (800369c <HAL_RCC_ClockConfig+0x1c4>)
 8003678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800367a:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe f9fc 	bl	8001a7c <HAL_InitTick>

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40023c00 	.word	0x40023c00
 8003694:	40023800 	.word	0x40023800
 8003698:	08007aa4 	.word	0x08007aa4
 800369c:	20000028 	.word	0x20000028
 80036a0:	2000002c 	.word	0x2000002c

080036a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a4:	b5b0      	push	{r4, r5, r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036aa:	2100      	movs	r1, #0
 80036ac:	6079      	str	r1, [r7, #4]
 80036ae:	2100      	movs	r1, #0
 80036b0:	60f9      	str	r1, [r7, #12]
 80036b2:	2100      	movs	r1, #0
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036b6:	2100      	movs	r1, #0
 80036b8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ba:	4952      	ldr	r1, [pc, #328]	; (8003804 <HAL_RCC_GetSysClockFreq+0x160>)
 80036bc:	6889      	ldr	r1, [r1, #8]
 80036be:	f001 010c 	and.w	r1, r1, #12
 80036c2:	2908      	cmp	r1, #8
 80036c4:	d00d      	beq.n	80036e2 <HAL_RCC_GetSysClockFreq+0x3e>
 80036c6:	2908      	cmp	r1, #8
 80036c8:	f200 8094 	bhi.w	80037f4 <HAL_RCC_GetSysClockFreq+0x150>
 80036cc:	2900      	cmp	r1, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_RCC_GetSysClockFreq+0x32>
 80036d0:	2904      	cmp	r1, #4
 80036d2:	d003      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x38>
 80036d4:	e08e      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036d6:	4b4c      	ldr	r3, [pc, #304]	; (8003808 <HAL_RCC_GetSysClockFreq+0x164>)
 80036d8:	60bb      	str	r3, [r7, #8]
       break;
 80036da:	e08e      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036dc:	4b4b      	ldr	r3, [pc, #300]	; (800380c <HAL_RCC_GetSysClockFreq+0x168>)
 80036de:	60bb      	str	r3, [r7, #8]
      break;
 80036e0:	e08b      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036e2:	4948      	ldr	r1, [pc, #288]	; (8003804 <HAL_RCC_GetSysClockFreq+0x160>)
 80036e4:	6849      	ldr	r1, [r1, #4]
 80036e6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80036ea:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ec:	4945      	ldr	r1, [pc, #276]	; (8003804 <HAL_RCC_GetSysClockFreq+0x160>)
 80036ee:	6849      	ldr	r1, [r1, #4]
 80036f0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80036f4:	2900      	cmp	r1, #0
 80036f6:	d024      	beq.n	8003742 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f8:	4942      	ldr	r1, [pc, #264]	; (8003804 <HAL_RCC_GetSysClockFreq+0x160>)
 80036fa:	6849      	ldr	r1, [r1, #4]
 80036fc:	0989      	lsrs	r1, r1, #6
 80036fe:	4608      	mov	r0, r1
 8003700:	f04f 0100 	mov.w	r1, #0
 8003704:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003708:	f04f 0500 	mov.w	r5, #0
 800370c:	ea00 0204 	and.w	r2, r0, r4
 8003710:	ea01 0305 	and.w	r3, r1, r5
 8003714:	493d      	ldr	r1, [pc, #244]	; (800380c <HAL_RCC_GetSysClockFreq+0x168>)
 8003716:	fb01 f003 	mul.w	r0, r1, r3
 800371a:	2100      	movs	r1, #0
 800371c:	fb01 f102 	mul.w	r1, r1, r2
 8003720:	1844      	adds	r4, r0, r1
 8003722:	493a      	ldr	r1, [pc, #232]	; (800380c <HAL_RCC_GetSysClockFreq+0x168>)
 8003724:	fba2 0101 	umull	r0, r1, r2, r1
 8003728:	1863      	adds	r3, r4, r1
 800372a:	4619      	mov	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	461a      	mov	r2, r3
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	f7fc fda4 	bl	8000280 <__aeabi_uldivmod>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4613      	mov	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	e04a      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003742:	4b30      	ldr	r3, [pc, #192]	; (8003804 <HAL_RCC_GetSysClockFreq+0x160>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	099b      	lsrs	r3, r3, #6
 8003748:	461a      	mov	r2, r3
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003752:	f04f 0100 	mov.w	r1, #0
 8003756:	ea02 0400 	and.w	r4, r2, r0
 800375a:	ea03 0501 	and.w	r5, r3, r1
 800375e:	4620      	mov	r0, r4
 8003760:	4629      	mov	r1, r5
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	014b      	lsls	r3, r1, #5
 800376c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003770:	0142      	lsls	r2, r0, #5
 8003772:	4610      	mov	r0, r2
 8003774:	4619      	mov	r1, r3
 8003776:	1b00      	subs	r0, r0, r4
 8003778:	eb61 0105 	sbc.w	r1, r1, r5
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	018b      	lsls	r3, r1, #6
 8003786:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800378a:	0182      	lsls	r2, r0, #6
 800378c:	1a12      	subs	r2, r2, r0
 800378e:	eb63 0301 	sbc.w	r3, r3, r1
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f04f 0100 	mov.w	r1, #0
 800379a:	00d9      	lsls	r1, r3, #3
 800379c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037a0:	00d0      	lsls	r0, r2, #3
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	1912      	adds	r2, r2, r4
 80037a8:	eb45 0303 	adc.w	r3, r5, r3
 80037ac:	f04f 0000 	mov.w	r0, #0
 80037b0:	f04f 0100 	mov.w	r1, #0
 80037b4:	0299      	lsls	r1, r3, #10
 80037b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037ba:	0290      	lsls	r0, r2, #10
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4610      	mov	r0, r2
 80037c2:	4619      	mov	r1, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	f7fc fd58 	bl	8000280 <__aeabi_uldivmod>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4613      	mov	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037d8:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <HAL_RCC_GetSysClockFreq+0x160>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	0c1b      	lsrs	r3, r3, #16
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	3301      	adds	r3, #1
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f0:	60bb      	str	r3, [r7, #8]
      break;
 80037f2:	e002      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <HAL_RCC_GetSysClockFreq+0x164>)
 80037f6:	60bb      	str	r3, [r7, #8]
      break;
 80037f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037fa:	68bb      	ldr	r3, [r7, #8]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bdb0      	pop	{r4, r5, r7, pc}
 8003804:	40023800 	.word	0x40023800
 8003808:	00f42400 	.word	0x00f42400
 800380c:	017d7840 	.word	0x017d7840

08003810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003814:	4b03      	ldr	r3, [pc, #12]	; (8003824 <HAL_RCC_GetHCLKFreq+0x14>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000028 	.word	0x20000028

08003828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800382c:	f7ff fff0 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	0a9b      	lsrs	r3, r3, #10
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4903      	ldr	r1, [pc, #12]	; (800384c <HAL_RCC_GetPCLK1Freq+0x24>)
 800383e:	5ccb      	ldrb	r3, [r1, r3]
 8003840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40023800 	.word	0x40023800
 800384c:	08007ab4 	.word	0x08007ab4

08003850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003854:	f7ff ffdc 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8003858:	4602      	mov	r2, r0
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	0b5b      	lsrs	r3, r3, #13
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4903      	ldr	r1, [pc, #12]	; (8003874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003866:	5ccb      	ldrb	r3, [r1, r3]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40023800 	.word	0x40023800
 8003874:	08007ab4 	.word	0x08007ab4

08003878 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b01      	cmp	r3, #1
 800388a:	d001      	beq.n	8003890 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e046      	b.n	800391e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a23      	ldr	r2, [pc, #140]	; (800392c <HAL_TIM_Base_Start+0xb4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d022      	beq.n	80038e8 <HAL_TIM_Base_Start+0x70>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038aa:	d01d      	beq.n	80038e8 <HAL_TIM_Base_Start+0x70>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1f      	ldr	r2, [pc, #124]	; (8003930 <HAL_TIM_Base_Start+0xb8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d018      	beq.n	80038e8 <HAL_TIM_Base_Start+0x70>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a1e      	ldr	r2, [pc, #120]	; (8003934 <HAL_TIM_Base_Start+0xbc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d013      	beq.n	80038e8 <HAL_TIM_Base_Start+0x70>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a1c      	ldr	r2, [pc, #112]	; (8003938 <HAL_TIM_Base_Start+0xc0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00e      	beq.n	80038e8 <HAL_TIM_Base_Start+0x70>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a1b      	ldr	r2, [pc, #108]	; (800393c <HAL_TIM_Base_Start+0xc4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d009      	beq.n	80038e8 <HAL_TIM_Base_Start+0x70>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a19      	ldr	r2, [pc, #100]	; (8003940 <HAL_TIM_Base_Start+0xc8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d004      	beq.n	80038e8 <HAL_TIM_Base_Start+0x70>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a18      	ldr	r2, [pc, #96]	; (8003944 <HAL_TIM_Base_Start+0xcc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d111      	bne.n	800390c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b06      	cmp	r3, #6
 80038f8:	d010      	beq.n	800391c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0201 	orr.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390a:	e007      	b.n	800391c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40010000 	.word	0x40010000
 8003930:	40000400 	.word	0x40000400
 8003934:	40000800 	.word	0x40000800
 8003938:	40000c00 	.word	0x40000c00
 800393c:	40010400 	.word	0x40010400
 8003940:	40014000 	.word	0x40014000
 8003944:	40001800 	.word	0x40001800

08003948 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d109      	bne.n	800396c <HAL_TIM_OC_Start+0x24>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e022      	b.n	80039b2 <HAL_TIM_OC_Start+0x6a>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b04      	cmp	r3, #4
 8003970:	d109      	bne.n	8003986 <HAL_TIM_OC_Start+0x3e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	bf14      	ite	ne
 800397e:	2301      	movne	r3, #1
 8003980:	2300      	moveq	r3, #0
 8003982:	b2db      	uxtb	r3, r3
 8003984:	e015      	b.n	80039b2 <HAL_TIM_OC_Start+0x6a>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d109      	bne.n	80039a0 <HAL_TIM_OC_Start+0x58>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b01      	cmp	r3, #1
 8003996:	bf14      	ite	ne
 8003998:	2301      	movne	r3, #1
 800399a:	2300      	moveq	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	e008      	b.n	80039b2 <HAL_TIM_OC_Start+0x6a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	bf14      	ite	ne
 80039ac:	2301      	movne	r3, #1
 80039ae:	2300      	moveq	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e07c      	b.n	8003ab4 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d104      	bne.n	80039ca <HAL_TIM_OC_Start+0x82>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c8:	e013      	b.n	80039f2 <HAL_TIM_OC_Start+0xaa>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d104      	bne.n	80039da <HAL_TIM_OC_Start+0x92>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039d8:	e00b      	b.n	80039f2 <HAL_TIM_OC_Start+0xaa>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d104      	bne.n	80039ea <HAL_TIM_OC_Start+0xa2>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039e8:	e003      	b.n	80039f2 <HAL_TIM_OC_Start+0xaa>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2201      	movs	r2, #1
 80039f8:	6839      	ldr	r1, [r7, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fc1a 	bl	8004234 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a2d      	ldr	r2, [pc, #180]	; (8003abc <HAL_TIM_OC_Start+0x174>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d004      	beq.n	8003a14 <HAL_TIM_OC_Start+0xcc>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a2c      	ldr	r2, [pc, #176]	; (8003ac0 <HAL_TIM_OC_Start+0x178>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d101      	bne.n	8003a18 <HAL_TIM_OC_Start+0xd0>
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <HAL_TIM_OC_Start+0xd2>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d007      	beq.n	8003a2e <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a22      	ldr	r2, [pc, #136]	; (8003abc <HAL_TIM_OC_Start+0x174>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d022      	beq.n	8003a7e <HAL_TIM_OC_Start+0x136>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a40:	d01d      	beq.n	8003a7e <HAL_TIM_OC_Start+0x136>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a1f      	ldr	r2, [pc, #124]	; (8003ac4 <HAL_TIM_OC_Start+0x17c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d018      	beq.n	8003a7e <HAL_TIM_OC_Start+0x136>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <HAL_TIM_OC_Start+0x180>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d013      	beq.n	8003a7e <HAL_TIM_OC_Start+0x136>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1c      	ldr	r2, [pc, #112]	; (8003acc <HAL_TIM_OC_Start+0x184>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00e      	beq.n	8003a7e <HAL_TIM_OC_Start+0x136>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a16      	ldr	r2, [pc, #88]	; (8003ac0 <HAL_TIM_OC_Start+0x178>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d009      	beq.n	8003a7e <HAL_TIM_OC_Start+0x136>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a18      	ldr	r2, [pc, #96]	; (8003ad0 <HAL_TIM_OC_Start+0x188>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d004      	beq.n	8003a7e <HAL_TIM_OC_Start+0x136>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a16      	ldr	r2, [pc, #88]	; (8003ad4 <HAL_TIM_OC_Start+0x18c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d111      	bne.n	8003aa2 <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b06      	cmp	r3, #6
 8003a8e:	d010      	beq.n	8003ab2 <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa0:	e007      	b.n	8003ab2 <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0201 	orr.w	r2, r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40010000 	.word	0x40010000
 8003ac0:	40010400 	.word	0x40010400
 8003ac4:	40000400 	.word	0x40000400
 8003ac8:	40000800 	.word	0x40000800
 8003acc:	40000c00 	.word	0x40000c00
 8003ad0:	40014000 	.word	0x40014000
 8003ad4:	40001800 	.word	0x40001800

08003ad8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e041      	b.n	8003b6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd fd80 	bl	8001604 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3304      	adds	r3, #4
 8003b14:	4619      	mov	r1, r3
 8003b16:	4610      	mov	r0, r2
 8003b18:	f000 f93c 	bl	8003d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e041      	b.n	8003c0e <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fd fd50 	bl	8001644 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	f000 f8ec 	bl	8003d94 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0208 	bic.w	r2, r2, #8
 8003bca:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6819      	ldr	r1, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e0ac      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b0c      	cmp	r3, #12
 8003c3e:	f200 809f 	bhi.w	8003d80 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003c42:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c48:	08003c7d 	.word	0x08003c7d
 8003c4c:	08003d81 	.word	0x08003d81
 8003c50:	08003d81 	.word	0x08003d81
 8003c54:	08003d81 	.word	0x08003d81
 8003c58:	08003cbd 	.word	0x08003cbd
 8003c5c:	08003d81 	.word	0x08003d81
 8003c60:	08003d81 	.word	0x08003d81
 8003c64:	08003d81 	.word	0x08003d81
 8003c68:	08003cff 	.word	0x08003cff
 8003c6c:	08003d81 	.word	0x08003d81
 8003c70:	08003d81 	.word	0x08003d81
 8003c74:	08003d81 	.word	0x08003d81
 8003c78:	08003d3f 	.word	0x08003d3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68b9      	ldr	r1, [r7, #8]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 f926 	bl	8003ed4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0208 	orr.w	r2, r2, #8
 8003c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0204 	bic.w	r2, r2, #4
 8003ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6999      	ldr	r1, [r3, #24]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	619a      	str	r2, [r3, #24]
      break;
 8003cba:	e062      	b.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 f976 	bl	8003fb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699a      	ldr	r2, [r3, #24]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6999      	ldr	r1, [r3, #24]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	021a      	lsls	r2, r3, #8
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	619a      	str	r2, [r3, #24]
      break;
 8003cfc:	e041      	b.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 f9cb 	bl	80040a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69da      	ldr	r2, [r3, #28]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0208 	orr.w	r2, r2, #8
 8003d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69da      	ldr	r2, [r3, #28]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0204 	bic.w	r2, r2, #4
 8003d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69d9      	ldr	r1, [r3, #28]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	61da      	str	r2, [r3, #28]
      break;
 8003d3c:	e021      	b.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fa1f 	bl	8004188 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69da      	ldr	r2, [r3, #28]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69da      	ldr	r2, [r3, #28]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69d9      	ldr	r1, [r3, #28]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	021a      	lsls	r2, r3, #8
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	61da      	str	r2, [r3, #28]
      break;
 8003d7e:	e000      	b.n	8003d82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003d80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a40      	ldr	r2, [pc, #256]	; (8003ea8 <TIM_Base_SetConfig+0x114>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d013      	beq.n	8003dd4 <TIM_Base_SetConfig+0x40>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db2:	d00f      	beq.n	8003dd4 <TIM_Base_SetConfig+0x40>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a3d      	ldr	r2, [pc, #244]	; (8003eac <TIM_Base_SetConfig+0x118>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d00b      	beq.n	8003dd4 <TIM_Base_SetConfig+0x40>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a3c      	ldr	r2, [pc, #240]	; (8003eb0 <TIM_Base_SetConfig+0x11c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d007      	beq.n	8003dd4 <TIM_Base_SetConfig+0x40>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a3b      	ldr	r2, [pc, #236]	; (8003eb4 <TIM_Base_SetConfig+0x120>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d003      	beq.n	8003dd4 <TIM_Base_SetConfig+0x40>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a3a      	ldr	r2, [pc, #232]	; (8003eb8 <TIM_Base_SetConfig+0x124>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d108      	bne.n	8003de6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a2f      	ldr	r2, [pc, #188]	; (8003ea8 <TIM_Base_SetConfig+0x114>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d02b      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df4:	d027      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a2c      	ldr	r2, [pc, #176]	; (8003eac <TIM_Base_SetConfig+0x118>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d023      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a2b      	ldr	r2, [pc, #172]	; (8003eb0 <TIM_Base_SetConfig+0x11c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d01f      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a2a      	ldr	r2, [pc, #168]	; (8003eb4 <TIM_Base_SetConfig+0x120>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d01b      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a29      	ldr	r2, [pc, #164]	; (8003eb8 <TIM_Base_SetConfig+0x124>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d017      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a28      	ldr	r2, [pc, #160]	; (8003ebc <TIM_Base_SetConfig+0x128>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a27      	ldr	r2, [pc, #156]	; (8003ec0 <TIM_Base_SetConfig+0x12c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00f      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a26      	ldr	r2, [pc, #152]	; (8003ec4 <TIM_Base_SetConfig+0x130>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00b      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a25      	ldr	r2, [pc, #148]	; (8003ec8 <TIM_Base_SetConfig+0x134>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d007      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a24      	ldr	r2, [pc, #144]	; (8003ecc <TIM_Base_SetConfig+0x138>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d003      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a23      	ldr	r2, [pc, #140]	; (8003ed0 <TIM_Base_SetConfig+0x13c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d108      	bne.n	8003e58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ea8 <TIM_Base_SetConfig+0x114>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d003      	beq.n	8003e8c <TIM_Base_SetConfig+0xf8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a0c      	ldr	r2, [pc, #48]	; (8003eb8 <TIM_Base_SetConfig+0x124>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d103      	bne.n	8003e94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	615a      	str	r2, [r3, #20]
}
 8003e9a:	bf00      	nop
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40010000 	.word	0x40010000
 8003eac:	40000400 	.word	0x40000400
 8003eb0:	40000800 	.word	0x40000800
 8003eb4:	40000c00 	.word	0x40000c00
 8003eb8:	40010400 	.word	0x40010400
 8003ebc:	40014000 	.word	0x40014000
 8003ec0:	40014400 	.word	0x40014400
 8003ec4:	40014800 	.word	0x40014800
 8003ec8:	40001800 	.word	0x40001800
 8003ecc:	40001c00 	.word	0x40001c00
 8003ed0:	40002000 	.word	0x40002000

08003ed4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f023 0201 	bic.w	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0303 	bic.w	r3, r3, #3
 8003f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f023 0302 	bic.w	r3, r3, #2
 8003f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a20      	ldr	r2, [pc, #128]	; (8003fac <TIM_OC1_SetConfig+0xd8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <TIM_OC1_SetConfig+0x64>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a1f      	ldr	r2, [pc, #124]	; (8003fb0 <TIM_OC1_SetConfig+0xdc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d10c      	bne.n	8003f52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f023 0308 	bic.w	r3, r3, #8
 8003f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f023 0304 	bic.w	r3, r3, #4
 8003f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a15      	ldr	r2, [pc, #84]	; (8003fac <TIM_OC1_SetConfig+0xd8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d003      	beq.n	8003f62 <TIM_OC1_SetConfig+0x8e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <TIM_OC1_SetConfig+0xdc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d111      	bne.n	8003f86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	621a      	str	r2, [r3, #32]
}
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	40010000 	.word	0x40010000
 8003fb0:	40010400 	.word	0x40010400

08003fb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f023 0210 	bic.w	r2, r3, #16
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	021b      	lsls	r3, r3, #8
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f023 0320 	bic.w	r3, r3, #32
 8003ffe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a22      	ldr	r2, [pc, #136]	; (8004098 <TIM_OC2_SetConfig+0xe4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d003      	beq.n	800401c <TIM_OC2_SetConfig+0x68>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a21      	ldr	r2, [pc, #132]	; (800409c <TIM_OC2_SetConfig+0xe8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d10d      	bne.n	8004038 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004036:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a17      	ldr	r2, [pc, #92]	; (8004098 <TIM_OC2_SetConfig+0xe4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d003      	beq.n	8004048 <TIM_OC2_SetConfig+0x94>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a16      	ldr	r2, [pc, #88]	; (800409c <TIM_OC2_SetConfig+0xe8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d113      	bne.n	8004070 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800404e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004056:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	621a      	str	r2, [r3, #32]
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40010000 	.word	0x40010000
 800409c:	40010400 	.word	0x40010400

080040a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0303 	bic.w	r3, r3, #3
 80040d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4313      	orrs	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	021b      	lsls	r3, r3, #8
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a21      	ldr	r2, [pc, #132]	; (8004180 <TIM_OC3_SetConfig+0xe0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d003      	beq.n	8004106 <TIM_OC3_SetConfig+0x66>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a20      	ldr	r2, [pc, #128]	; (8004184 <TIM_OC3_SetConfig+0xe4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d10d      	bne.n	8004122 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800410c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	021b      	lsls	r3, r3, #8
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a16      	ldr	r2, [pc, #88]	; (8004180 <TIM_OC3_SetConfig+0xe0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d003      	beq.n	8004132 <TIM_OC3_SetConfig+0x92>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a15      	ldr	r2, [pc, #84]	; (8004184 <TIM_OC3_SetConfig+0xe4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d113      	bne.n	800415a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	621a      	str	r2, [r3, #32]
}
 8004174:	bf00      	nop
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	40010000 	.word	0x40010000
 8004184:	40010400 	.word	0x40010400

08004188 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	031b      	lsls	r3, r3, #12
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a12      	ldr	r2, [pc, #72]	; (800422c <TIM_OC4_SetConfig+0xa4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d003      	beq.n	80041f0 <TIM_OC4_SetConfig+0x68>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a11      	ldr	r2, [pc, #68]	; (8004230 <TIM_OC4_SetConfig+0xa8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d109      	bne.n	8004204 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	019b      	lsls	r3, r3, #6
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	621a      	str	r2, [r3, #32]
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40010000 	.word	0x40010000
 8004230:	40010400 	.word	0x40010400

08004234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	2201      	movs	r2, #1
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a1a      	ldr	r2, [r3, #32]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	43db      	mvns	r3, r3
 8004256:	401a      	ands	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a1a      	ldr	r2, [r3, #32]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	fa01 f303 	lsl.w	r3, r1, r3
 800426c:	431a      	orrs	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	621a      	str	r2, [r3, #32]
}
 8004272:	bf00      	nop
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
	...

08004280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004294:	2302      	movs	r3, #2
 8004296:	e05a      	b.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a21      	ldr	r2, [pc, #132]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d022      	beq.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e4:	d01d      	beq.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d018      	beq.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1b      	ldr	r2, [pc, #108]	; (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d013      	beq.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1a      	ldr	r2, [pc, #104]	; (8004368 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00e      	beq.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a18      	ldr	r2, [pc, #96]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d009      	beq.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a17      	ldr	r2, [pc, #92]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d004      	beq.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a15      	ldr	r2, [pc, #84]	; (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d10c      	bne.n	800433c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004328:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	4313      	orrs	r3, r2
 8004332:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40010000 	.word	0x40010000
 8004360:	40000400 	.word	0x40000400
 8004364:	40000800 	.word	0x40000800
 8004368:	40000c00 	.word	0x40000c00
 800436c:	40010400 	.word	0x40010400
 8004370:	40014000 	.word	0x40014000
 8004374:	40001800 	.word	0x40001800

08004378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e03f      	b.n	800440a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fd f9aa 	bl	80016f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2224      	movs	r2, #36	; 0x24
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f905 	bl	80045cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695a      	ldr	r2, [r3, #20]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b08a      	sub	sp, #40	; 0x28
 8004416:	af02      	add	r7, sp, #8
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	603b      	str	r3, [r7, #0]
 800441e:	4613      	mov	r3, r2
 8004420:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b20      	cmp	r3, #32
 8004430:	d17c      	bne.n	800452c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_UART_Transmit+0x2c>
 8004438:	88fb      	ldrh	r3, [r7, #6]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e075      	b.n	800452e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_UART_Transmit+0x3e>
 800444c:	2302      	movs	r3, #2
 800444e:	e06e      	b.n	800452e <HAL_UART_Transmit+0x11c>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2221      	movs	r2, #33	; 0x21
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004466:	f7fd fb4d 	bl	8001b04 <HAL_GetTick>
 800446a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	88fa      	ldrh	r2, [r7, #6]
 8004470:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	88fa      	ldrh	r2, [r7, #6]
 8004476:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004480:	d108      	bne.n	8004494 <HAL_UART_Transmit+0x82>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d104      	bne.n	8004494 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	e003      	b.n	800449c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004498:	2300      	movs	r3, #0
 800449a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044a4:	e02a      	b.n	80044fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2200      	movs	r2, #0
 80044ae:	2180      	movs	r1, #128	; 0x80
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f840 	bl	8004536 <UART_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e036      	b.n	800452e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10b      	bne.n	80044de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	3302      	adds	r3, #2
 80044da:	61bb      	str	r3, [r7, #24]
 80044dc:	e007      	b.n	80044ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	3301      	adds	r3, #1
 80044ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1cf      	bne.n	80044a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2200      	movs	r2, #0
 800450e:	2140      	movs	r1, #64	; 0x40
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f810 	bl	8004536 <UART_WaitOnFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e006      	b.n	800452e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	e000      	b.n	800452e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800452c:	2302      	movs	r3, #2
  }
}
 800452e:	4618      	mov	r0, r3
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	603b      	str	r3, [r7, #0]
 8004542:	4613      	mov	r3, r2
 8004544:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004546:	e02c      	b.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454e:	d028      	beq.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d007      	beq.n	8004566 <UART_WaitOnFlagUntilTimeout+0x30>
 8004556:	f7fd fad5 	bl	8001b04 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	429a      	cmp	r2, r3
 8004564:	d21d      	bcs.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004574:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695a      	ldr	r2, [r3, #20]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0201 	bic.w	r2, r2, #1
 8004584:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e00f      	b.n	80045c2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4013      	ands	r3, r2
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	bf0c      	ite	eq
 80045b2:	2301      	moveq	r3, #1
 80045b4:	2300      	movne	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d0c3      	beq.n	8004548 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d0:	b09f      	sub	sp, #124	; 0x7c
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e2:	68d9      	ldr	r1, [r3, #12]
 80045e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	ea40 0301 	orr.w	r3, r0, r1
 80045ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	431a      	orrs	r2, r3
 80045fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	4313      	orrs	r3, r2
 8004604:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004610:	f021 010c 	bic.w	r1, r1, #12
 8004614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800461a:	430b      	orrs	r3, r1
 800461c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800461e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462a:	6999      	ldr	r1, [r3, #24]
 800462c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	ea40 0301 	orr.w	r3, r0, r1
 8004634:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	4bc5      	ldr	r3, [pc, #788]	; (8004950 <UART_SetConfig+0x384>)
 800463c:	429a      	cmp	r2, r3
 800463e:	d004      	beq.n	800464a <UART_SetConfig+0x7e>
 8004640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	4bc3      	ldr	r3, [pc, #780]	; (8004954 <UART_SetConfig+0x388>)
 8004646:	429a      	cmp	r2, r3
 8004648:	d103      	bne.n	8004652 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800464a:	f7ff f901 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 800464e:	6778      	str	r0, [r7, #116]	; 0x74
 8004650:	e002      	b.n	8004658 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004652:	f7ff f8e9 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8004656:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004660:	f040 80b6 	bne.w	80047d0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004666:	461c      	mov	r4, r3
 8004668:	f04f 0500 	mov.w	r5, #0
 800466c:	4622      	mov	r2, r4
 800466e:	462b      	mov	r3, r5
 8004670:	1891      	adds	r1, r2, r2
 8004672:	6439      	str	r1, [r7, #64]	; 0x40
 8004674:	415b      	adcs	r3, r3
 8004676:	647b      	str	r3, [r7, #68]	; 0x44
 8004678:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800467c:	1912      	adds	r2, r2, r4
 800467e:	eb45 0303 	adc.w	r3, r5, r3
 8004682:	f04f 0000 	mov.w	r0, #0
 8004686:	f04f 0100 	mov.w	r1, #0
 800468a:	00d9      	lsls	r1, r3, #3
 800468c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004690:	00d0      	lsls	r0, r2, #3
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	1911      	adds	r1, r2, r4
 8004698:	6639      	str	r1, [r7, #96]	; 0x60
 800469a:	416b      	adcs	r3, r5
 800469c:	667b      	str	r3, [r7, #100]	; 0x64
 800469e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	461a      	mov	r2, r3
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	1891      	adds	r1, r2, r2
 80046aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80046ac:	415b      	adcs	r3, r3
 80046ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80046b8:	f7fb fde2 	bl	8000280 <__aeabi_uldivmod>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4ba5      	ldr	r3, [pc, #660]	; (8004958 <UART_SetConfig+0x38c>)
 80046c2:	fba3 2302 	umull	r2, r3, r3, r2
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	011e      	lsls	r6, r3, #4
 80046ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046cc:	461c      	mov	r4, r3
 80046ce:	f04f 0500 	mov.w	r5, #0
 80046d2:	4622      	mov	r2, r4
 80046d4:	462b      	mov	r3, r5
 80046d6:	1891      	adds	r1, r2, r2
 80046d8:	6339      	str	r1, [r7, #48]	; 0x30
 80046da:	415b      	adcs	r3, r3
 80046dc:	637b      	str	r3, [r7, #52]	; 0x34
 80046de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80046e2:	1912      	adds	r2, r2, r4
 80046e4:	eb45 0303 	adc.w	r3, r5, r3
 80046e8:	f04f 0000 	mov.w	r0, #0
 80046ec:	f04f 0100 	mov.w	r1, #0
 80046f0:	00d9      	lsls	r1, r3, #3
 80046f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046f6:	00d0      	lsls	r0, r2, #3
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	1911      	adds	r1, r2, r4
 80046fe:	65b9      	str	r1, [r7, #88]	; 0x58
 8004700:	416b      	adcs	r3, r5
 8004702:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	461a      	mov	r2, r3
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	1891      	adds	r1, r2, r2
 8004710:	62b9      	str	r1, [r7, #40]	; 0x28
 8004712:	415b      	adcs	r3, r3
 8004714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004716:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800471a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800471e:	f7fb fdaf 	bl	8000280 <__aeabi_uldivmod>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4b8c      	ldr	r3, [pc, #560]	; (8004958 <UART_SetConfig+0x38c>)
 8004728:	fba3 1302 	umull	r1, r3, r3, r2
 800472c:	095b      	lsrs	r3, r3, #5
 800472e:	2164      	movs	r1, #100	; 0x64
 8004730:	fb01 f303 	mul.w	r3, r1, r3
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	3332      	adds	r3, #50	; 0x32
 800473a:	4a87      	ldr	r2, [pc, #540]	; (8004958 <UART_SetConfig+0x38c>)
 800473c:	fba2 2303 	umull	r2, r3, r2, r3
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004748:	441e      	add	r6, r3
 800474a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800474c:	4618      	mov	r0, r3
 800474e:	f04f 0100 	mov.w	r1, #0
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	1894      	adds	r4, r2, r2
 8004758:	623c      	str	r4, [r7, #32]
 800475a:	415b      	adcs	r3, r3
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
 800475e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004762:	1812      	adds	r2, r2, r0
 8004764:	eb41 0303 	adc.w	r3, r1, r3
 8004768:	f04f 0400 	mov.w	r4, #0
 800476c:	f04f 0500 	mov.w	r5, #0
 8004770:	00dd      	lsls	r5, r3, #3
 8004772:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004776:	00d4      	lsls	r4, r2, #3
 8004778:	4622      	mov	r2, r4
 800477a:	462b      	mov	r3, r5
 800477c:	1814      	adds	r4, r2, r0
 800477e:	653c      	str	r4, [r7, #80]	; 0x50
 8004780:	414b      	adcs	r3, r1
 8004782:	657b      	str	r3, [r7, #84]	; 0x54
 8004784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	461a      	mov	r2, r3
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	1891      	adds	r1, r2, r2
 8004790:	61b9      	str	r1, [r7, #24]
 8004792:	415b      	adcs	r3, r3
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800479a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800479e:	f7fb fd6f 	bl	8000280 <__aeabi_uldivmod>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4b6c      	ldr	r3, [pc, #432]	; (8004958 <UART_SetConfig+0x38c>)
 80047a8:	fba3 1302 	umull	r1, r3, r3, r2
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	2164      	movs	r1, #100	; 0x64
 80047b0:	fb01 f303 	mul.w	r3, r1, r3
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	3332      	adds	r3, #50	; 0x32
 80047ba:	4a67      	ldr	r2, [pc, #412]	; (8004958 <UART_SetConfig+0x38c>)
 80047bc:	fba2 2303 	umull	r2, r3, r2, r3
 80047c0:	095b      	lsrs	r3, r3, #5
 80047c2:	f003 0207 	and.w	r2, r3, #7
 80047c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4432      	add	r2, r6
 80047cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047ce:	e0b9      	b.n	8004944 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047d2:	461c      	mov	r4, r3
 80047d4:	f04f 0500 	mov.w	r5, #0
 80047d8:	4622      	mov	r2, r4
 80047da:	462b      	mov	r3, r5
 80047dc:	1891      	adds	r1, r2, r2
 80047de:	6139      	str	r1, [r7, #16]
 80047e0:	415b      	adcs	r3, r3
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047e8:	1912      	adds	r2, r2, r4
 80047ea:	eb45 0303 	adc.w	r3, r5, r3
 80047ee:	f04f 0000 	mov.w	r0, #0
 80047f2:	f04f 0100 	mov.w	r1, #0
 80047f6:	00d9      	lsls	r1, r3, #3
 80047f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047fc:	00d0      	lsls	r0, r2, #3
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	eb12 0804 	adds.w	r8, r2, r4
 8004806:	eb43 0905 	adc.w	r9, r3, r5
 800480a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	4618      	mov	r0, r3
 8004810:	f04f 0100 	mov.w	r1, #0
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	008b      	lsls	r3, r1, #2
 800481e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004822:	0082      	lsls	r2, r0, #2
 8004824:	4640      	mov	r0, r8
 8004826:	4649      	mov	r1, r9
 8004828:	f7fb fd2a 	bl	8000280 <__aeabi_uldivmod>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4b49      	ldr	r3, [pc, #292]	; (8004958 <UART_SetConfig+0x38c>)
 8004832:	fba3 2302 	umull	r2, r3, r3, r2
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	011e      	lsls	r6, r3, #4
 800483a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800483c:	4618      	mov	r0, r3
 800483e:	f04f 0100 	mov.w	r1, #0
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	1894      	adds	r4, r2, r2
 8004848:	60bc      	str	r4, [r7, #8]
 800484a:	415b      	adcs	r3, r3
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004852:	1812      	adds	r2, r2, r0
 8004854:	eb41 0303 	adc.w	r3, r1, r3
 8004858:	f04f 0400 	mov.w	r4, #0
 800485c:	f04f 0500 	mov.w	r5, #0
 8004860:	00dd      	lsls	r5, r3, #3
 8004862:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004866:	00d4      	lsls	r4, r2, #3
 8004868:	4622      	mov	r2, r4
 800486a:	462b      	mov	r3, r5
 800486c:	1814      	adds	r4, r2, r0
 800486e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004870:	414b      	adcs	r3, r1
 8004872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	4618      	mov	r0, r3
 800487a:	f04f 0100 	mov.w	r1, #0
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	008b      	lsls	r3, r1, #2
 8004888:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800488c:	0082      	lsls	r2, r0, #2
 800488e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004892:	f7fb fcf5 	bl	8000280 <__aeabi_uldivmod>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4b2f      	ldr	r3, [pc, #188]	; (8004958 <UART_SetConfig+0x38c>)
 800489c:	fba3 1302 	umull	r1, r3, r3, r2
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	2164      	movs	r1, #100	; 0x64
 80048a4:	fb01 f303 	mul.w	r3, r1, r3
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	3332      	adds	r3, #50	; 0x32
 80048ae:	4a2a      	ldr	r2, [pc, #168]	; (8004958 <UART_SetConfig+0x38c>)
 80048b0:	fba2 2303 	umull	r2, r3, r2, r3
 80048b4:	095b      	lsrs	r3, r3, #5
 80048b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ba:	441e      	add	r6, r3
 80048bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048be:	4618      	mov	r0, r3
 80048c0:	f04f 0100 	mov.w	r1, #0
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	1894      	adds	r4, r2, r2
 80048ca:	603c      	str	r4, [r7, #0]
 80048cc:	415b      	adcs	r3, r3
 80048ce:	607b      	str	r3, [r7, #4]
 80048d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048d4:	1812      	adds	r2, r2, r0
 80048d6:	eb41 0303 	adc.w	r3, r1, r3
 80048da:	f04f 0400 	mov.w	r4, #0
 80048de:	f04f 0500 	mov.w	r5, #0
 80048e2:	00dd      	lsls	r5, r3, #3
 80048e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80048e8:	00d4      	lsls	r4, r2, #3
 80048ea:	4622      	mov	r2, r4
 80048ec:	462b      	mov	r3, r5
 80048ee:	eb12 0a00 	adds.w	sl, r2, r0
 80048f2:	eb43 0b01 	adc.w	fp, r3, r1
 80048f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f04f 0100 	mov.w	r1, #0
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	008b      	lsls	r3, r1, #2
 800490a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800490e:	0082      	lsls	r2, r0, #2
 8004910:	4650      	mov	r0, sl
 8004912:	4659      	mov	r1, fp
 8004914:	f7fb fcb4 	bl	8000280 <__aeabi_uldivmod>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <UART_SetConfig+0x38c>)
 800491e:	fba3 1302 	umull	r1, r3, r3, r2
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	2164      	movs	r1, #100	; 0x64
 8004926:	fb01 f303 	mul.w	r3, r1, r3
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	3332      	adds	r3, #50	; 0x32
 8004930:	4a09      	ldr	r2, [pc, #36]	; (8004958 <UART_SetConfig+0x38c>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	f003 020f 	and.w	r2, r3, #15
 800493c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4432      	add	r2, r6
 8004942:	609a      	str	r2, [r3, #8]
}
 8004944:	bf00      	nop
 8004946:	377c      	adds	r7, #124	; 0x7c
 8004948:	46bd      	mov	sp, r7
 800494a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494e:	bf00      	nop
 8004950:	40011000 	.word	0x40011000
 8004954:	40011400 	.word	0x40011400
 8004958:	51eb851f 	.word	0x51eb851f

0800495c <__errno>:
 800495c:	4b01      	ldr	r3, [pc, #4]	; (8004964 <__errno+0x8>)
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	20000034 	.word	0x20000034

08004968 <__libc_init_array>:
 8004968:	b570      	push	{r4, r5, r6, lr}
 800496a:	4d0d      	ldr	r5, [pc, #52]	; (80049a0 <__libc_init_array+0x38>)
 800496c:	4c0d      	ldr	r4, [pc, #52]	; (80049a4 <__libc_init_array+0x3c>)
 800496e:	1b64      	subs	r4, r4, r5
 8004970:	10a4      	asrs	r4, r4, #2
 8004972:	2600      	movs	r6, #0
 8004974:	42a6      	cmp	r6, r4
 8004976:	d109      	bne.n	800498c <__libc_init_array+0x24>
 8004978:	4d0b      	ldr	r5, [pc, #44]	; (80049a8 <__libc_init_array+0x40>)
 800497a:	4c0c      	ldr	r4, [pc, #48]	; (80049ac <__libc_init_array+0x44>)
 800497c:	f000 fc64 	bl	8005248 <_init>
 8004980:	1b64      	subs	r4, r4, r5
 8004982:	10a4      	asrs	r4, r4, #2
 8004984:	2600      	movs	r6, #0
 8004986:	42a6      	cmp	r6, r4
 8004988:	d105      	bne.n	8004996 <__libc_init_array+0x2e>
 800498a:	bd70      	pop	{r4, r5, r6, pc}
 800498c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004990:	4798      	blx	r3
 8004992:	3601      	adds	r6, #1
 8004994:	e7ee      	b.n	8004974 <__libc_init_array+0xc>
 8004996:	f855 3b04 	ldr.w	r3, [r5], #4
 800499a:	4798      	blx	r3
 800499c:	3601      	adds	r6, #1
 800499e:	e7f2      	b.n	8004986 <__libc_init_array+0x1e>
 80049a0:	08007af8 	.word	0x08007af8
 80049a4:	08007af8 	.word	0x08007af8
 80049a8:	08007af8 	.word	0x08007af8
 80049ac:	08007afc 	.word	0x08007afc

080049b0 <memcpy>:
 80049b0:	440a      	add	r2, r1
 80049b2:	4291      	cmp	r1, r2
 80049b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80049b8:	d100      	bne.n	80049bc <memcpy+0xc>
 80049ba:	4770      	bx	lr
 80049bc:	b510      	push	{r4, lr}
 80049be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049c6:	4291      	cmp	r1, r2
 80049c8:	d1f9      	bne.n	80049be <memcpy+0xe>
 80049ca:	bd10      	pop	{r4, pc}

080049cc <memset>:
 80049cc:	4402      	add	r2, r0
 80049ce:	4603      	mov	r3, r0
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d100      	bne.n	80049d6 <memset+0xa>
 80049d4:	4770      	bx	lr
 80049d6:	f803 1b01 	strb.w	r1, [r3], #1
 80049da:	e7f9      	b.n	80049d0 <memset+0x4>

080049dc <siprintf>:
 80049dc:	b40e      	push	{r1, r2, r3}
 80049de:	b500      	push	{lr}
 80049e0:	b09c      	sub	sp, #112	; 0x70
 80049e2:	ab1d      	add	r3, sp, #116	; 0x74
 80049e4:	9002      	str	r0, [sp, #8]
 80049e6:	9006      	str	r0, [sp, #24]
 80049e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049ec:	4809      	ldr	r0, [pc, #36]	; (8004a14 <siprintf+0x38>)
 80049ee:	9107      	str	r1, [sp, #28]
 80049f0:	9104      	str	r1, [sp, #16]
 80049f2:	4909      	ldr	r1, [pc, #36]	; (8004a18 <siprintf+0x3c>)
 80049f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80049f8:	9105      	str	r1, [sp, #20]
 80049fa:	6800      	ldr	r0, [r0, #0]
 80049fc:	9301      	str	r3, [sp, #4]
 80049fe:	a902      	add	r1, sp, #8
 8004a00:	f000 f87e 	bl	8004b00 <_svfiprintf_r>
 8004a04:	9b02      	ldr	r3, [sp, #8]
 8004a06:	2200      	movs	r2, #0
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	b01c      	add	sp, #112	; 0x70
 8004a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a10:	b003      	add	sp, #12
 8004a12:	4770      	bx	lr
 8004a14:	20000034 	.word	0x20000034
 8004a18:	ffff0208 	.word	0xffff0208

08004a1c <strcat>:
 8004a1c:	b510      	push	{r4, lr}
 8004a1e:	4602      	mov	r2, r0
 8004a20:	7814      	ldrb	r4, [r2, #0]
 8004a22:	4613      	mov	r3, r2
 8004a24:	3201      	adds	r2, #1
 8004a26:	2c00      	cmp	r4, #0
 8004a28:	d1fa      	bne.n	8004a20 <strcat+0x4>
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a30:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a34:	2a00      	cmp	r2, #0
 8004a36:	d1f9      	bne.n	8004a2c <strcat+0x10>
 8004a38:	bd10      	pop	{r4, pc}

08004a3a <strcpy>:
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a40:	f803 2b01 	strb.w	r2, [r3], #1
 8004a44:	2a00      	cmp	r2, #0
 8004a46:	d1f9      	bne.n	8004a3c <strcpy+0x2>
 8004a48:	4770      	bx	lr

08004a4a <__ssputs_r>:
 8004a4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a4e:	688e      	ldr	r6, [r1, #8]
 8004a50:	429e      	cmp	r6, r3
 8004a52:	4682      	mov	sl, r0
 8004a54:	460c      	mov	r4, r1
 8004a56:	4690      	mov	r8, r2
 8004a58:	461f      	mov	r7, r3
 8004a5a:	d838      	bhi.n	8004ace <__ssputs_r+0x84>
 8004a5c:	898a      	ldrh	r2, [r1, #12]
 8004a5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a62:	d032      	beq.n	8004aca <__ssputs_r+0x80>
 8004a64:	6825      	ldr	r5, [r4, #0]
 8004a66:	6909      	ldr	r1, [r1, #16]
 8004a68:	eba5 0901 	sub.w	r9, r5, r1
 8004a6c:	6965      	ldr	r5, [r4, #20]
 8004a6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a76:	3301      	adds	r3, #1
 8004a78:	444b      	add	r3, r9
 8004a7a:	106d      	asrs	r5, r5, #1
 8004a7c:	429d      	cmp	r5, r3
 8004a7e:	bf38      	it	cc
 8004a80:	461d      	movcc	r5, r3
 8004a82:	0553      	lsls	r3, r2, #21
 8004a84:	d531      	bpl.n	8004aea <__ssputs_r+0xa0>
 8004a86:	4629      	mov	r1, r5
 8004a88:	f000 fb38 	bl	80050fc <_malloc_r>
 8004a8c:	4606      	mov	r6, r0
 8004a8e:	b950      	cbnz	r0, 8004aa6 <__ssputs_r+0x5c>
 8004a90:	230c      	movs	r3, #12
 8004a92:	f8ca 3000 	str.w	r3, [sl]
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a9c:	81a3      	strh	r3, [r4, #12]
 8004a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa6:	6921      	ldr	r1, [r4, #16]
 8004aa8:	464a      	mov	r2, r9
 8004aaa:	f7ff ff81 	bl	80049b0 <memcpy>
 8004aae:	89a3      	ldrh	r3, [r4, #12]
 8004ab0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab8:	81a3      	strh	r3, [r4, #12]
 8004aba:	6126      	str	r6, [r4, #16]
 8004abc:	6165      	str	r5, [r4, #20]
 8004abe:	444e      	add	r6, r9
 8004ac0:	eba5 0509 	sub.w	r5, r5, r9
 8004ac4:	6026      	str	r6, [r4, #0]
 8004ac6:	60a5      	str	r5, [r4, #8]
 8004ac8:	463e      	mov	r6, r7
 8004aca:	42be      	cmp	r6, r7
 8004acc:	d900      	bls.n	8004ad0 <__ssputs_r+0x86>
 8004ace:	463e      	mov	r6, r7
 8004ad0:	4632      	mov	r2, r6
 8004ad2:	6820      	ldr	r0, [r4, #0]
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	f000 faa7 	bl	8005028 <memmove>
 8004ada:	68a3      	ldr	r3, [r4, #8]
 8004adc:	6822      	ldr	r2, [r4, #0]
 8004ade:	1b9b      	subs	r3, r3, r6
 8004ae0:	4432      	add	r2, r6
 8004ae2:	60a3      	str	r3, [r4, #8]
 8004ae4:	6022      	str	r2, [r4, #0]
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	e7db      	b.n	8004aa2 <__ssputs_r+0x58>
 8004aea:	462a      	mov	r2, r5
 8004aec:	f000 fb60 	bl	80051b0 <_realloc_r>
 8004af0:	4606      	mov	r6, r0
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d1e1      	bne.n	8004aba <__ssputs_r+0x70>
 8004af6:	6921      	ldr	r1, [r4, #16]
 8004af8:	4650      	mov	r0, sl
 8004afa:	f000 faaf 	bl	800505c <_free_r>
 8004afe:	e7c7      	b.n	8004a90 <__ssputs_r+0x46>

08004b00 <_svfiprintf_r>:
 8004b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b04:	4698      	mov	r8, r3
 8004b06:	898b      	ldrh	r3, [r1, #12]
 8004b08:	061b      	lsls	r3, r3, #24
 8004b0a:	b09d      	sub	sp, #116	; 0x74
 8004b0c:	4607      	mov	r7, r0
 8004b0e:	460d      	mov	r5, r1
 8004b10:	4614      	mov	r4, r2
 8004b12:	d50e      	bpl.n	8004b32 <_svfiprintf_r+0x32>
 8004b14:	690b      	ldr	r3, [r1, #16]
 8004b16:	b963      	cbnz	r3, 8004b32 <_svfiprintf_r+0x32>
 8004b18:	2140      	movs	r1, #64	; 0x40
 8004b1a:	f000 faef 	bl	80050fc <_malloc_r>
 8004b1e:	6028      	str	r0, [r5, #0]
 8004b20:	6128      	str	r0, [r5, #16]
 8004b22:	b920      	cbnz	r0, 8004b2e <_svfiprintf_r+0x2e>
 8004b24:	230c      	movs	r3, #12
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2c:	e0d1      	b.n	8004cd2 <_svfiprintf_r+0x1d2>
 8004b2e:	2340      	movs	r3, #64	; 0x40
 8004b30:	616b      	str	r3, [r5, #20]
 8004b32:	2300      	movs	r3, #0
 8004b34:	9309      	str	r3, [sp, #36]	; 0x24
 8004b36:	2320      	movs	r3, #32
 8004b38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b40:	2330      	movs	r3, #48	; 0x30
 8004b42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004cec <_svfiprintf_r+0x1ec>
 8004b46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b4a:	f04f 0901 	mov.w	r9, #1
 8004b4e:	4623      	mov	r3, r4
 8004b50:	469a      	mov	sl, r3
 8004b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b56:	b10a      	cbz	r2, 8004b5c <_svfiprintf_r+0x5c>
 8004b58:	2a25      	cmp	r2, #37	; 0x25
 8004b5a:	d1f9      	bne.n	8004b50 <_svfiprintf_r+0x50>
 8004b5c:	ebba 0b04 	subs.w	fp, sl, r4
 8004b60:	d00b      	beq.n	8004b7a <_svfiprintf_r+0x7a>
 8004b62:	465b      	mov	r3, fp
 8004b64:	4622      	mov	r2, r4
 8004b66:	4629      	mov	r1, r5
 8004b68:	4638      	mov	r0, r7
 8004b6a:	f7ff ff6e 	bl	8004a4a <__ssputs_r>
 8004b6e:	3001      	adds	r0, #1
 8004b70:	f000 80aa 	beq.w	8004cc8 <_svfiprintf_r+0x1c8>
 8004b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b76:	445a      	add	r2, fp
 8004b78:	9209      	str	r2, [sp, #36]	; 0x24
 8004b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 80a2 	beq.w	8004cc8 <_svfiprintf_r+0x1c8>
 8004b84:	2300      	movs	r3, #0
 8004b86:	f04f 32ff 	mov.w	r2, #4294967295
 8004b8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b8e:	f10a 0a01 	add.w	sl, sl, #1
 8004b92:	9304      	str	r3, [sp, #16]
 8004b94:	9307      	str	r3, [sp, #28]
 8004b96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b9a:	931a      	str	r3, [sp, #104]	; 0x68
 8004b9c:	4654      	mov	r4, sl
 8004b9e:	2205      	movs	r2, #5
 8004ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ba4:	4851      	ldr	r0, [pc, #324]	; (8004cec <_svfiprintf_r+0x1ec>)
 8004ba6:	f7fb fb1b 	bl	80001e0 <memchr>
 8004baa:	9a04      	ldr	r2, [sp, #16]
 8004bac:	b9d8      	cbnz	r0, 8004be6 <_svfiprintf_r+0xe6>
 8004bae:	06d0      	lsls	r0, r2, #27
 8004bb0:	bf44      	itt	mi
 8004bb2:	2320      	movmi	r3, #32
 8004bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bb8:	0711      	lsls	r1, r2, #28
 8004bba:	bf44      	itt	mi
 8004bbc:	232b      	movmi	r3, #43	; 0x2b
 8004bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8004bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8004bc8:	d015      	beq.n	8004bf6 <_svfiprintf_r+0xf6>
 8004bca:	9a07      	ldr	r2, [sp, #28]
 8004bcc:	4654      	mov	r4, sl
 8004bce:	2000      	movs	r0, #0
 8004bd0:	f04f 0c0a 	mov.w	ip, #10
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bda:	3b30      	subs	r3, #48	; 0x30
 8004bdc:	2b09      	cmp	r3, #9
 8004bde:	d94e      	bls.n	8004c7e <_svfiprintf_r+0x17e>
 8004be0:	b1b0      	cbz	r0, 8004c10 <_svfiprintf_r+0x110>
 8004be2:	9207      	str	r2, [sp, #28]
 8004be4:	e014      	b.n	8004c10 <_svfiprintf_r+0x110>
 8004be6:	eba0 0308 	sub.w	r3, r0, r8
 8004bea:	fa09 f303 	lsl.w	r3, r9, r3
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	9304      	str	r3, [sp, #16]
 8004bf2:	46a2      	mov	sl, r4
 8004bf4:	e7d2      	b.n	8004b9c <_svfiprintf_r+0x9c>
 8004bf6:	9b03      	ldr	r3, [sp, #12]
 8004bf8:	1d19      	adds	r1, r3, #4
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	9103      	str	r1, [sp, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	bfbb      	ittet	lt
 8004c02:	425b      	neglt	r3, r3
 8004c04:	f042 0202 	orrlt.w	r2, r2, #2
 8004c08:	9307      	strge	r3, [sp, #28]
 8004c0a:	9307      	strlt	r3, [sp, #28]
 8004c0c:	bfb8      	it	lt
 8004c0e:	9204      	strlt	r2, [sp, #16]
 8004c10:	7823      	ldrb	r3, [r4, #0]
 8004c12:	2b2e      	cmp	r3, #46	; 0x2e
 8004c14:	d10c      	bne.n	8004c30 <_svfiprintf_r+0x130>
 8004c16:	7863      	ldrb	r3, [r4, #1]
 8004c18:	2b2a      	cmp	r3, #42	; 0x2a
 8004c1a:	d135      	bne.n	8004c88 <_svfiprintf_r+0x188>
 8004c1c:	9b03      	ldr	r3, [sp, #12]
 8004c1e:	1d1a      	adds	r2, r3, #4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	9203      	str	r2, [sp, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	bfb8      	it	lt
 8004c28:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c2c:	3402      	adds	r4, #2
 8004c2e:	9305      	str	r3, [sp, #20]
 8004c30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004cfc <_svfiprintf_r+0x1fc>
 8004c34:	7821      	ldrb	r1, [r4, #0]
 8004c36:	2203      	movs	r2, #3
 8004c38:	4650      	mov	r0, sl
 8004c3a:	f7fb fad1 	bl	80001e0 <memchr>
 8004c3e:	b140      	cbz	r0, 8004c52 <_svfiprintf_r+0x152>
 8004c40:	2340      	movs	r3, #64	; 0x40
 8004c42:	eba0 000a 	sub.w	r0, r0, sl
 8004c46:	fa03 f000 	lsl.w	r0, r3, r0
 8004c4a:	9b04      	ldr	r3, [sp, #16]
 8004c4c:	4303      	orrs	r3, r0
 8004c4e:	3401      	adds	r4, #1
 8004c50:	9304      	str	r3, [sp, #16]
 8004c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c56:	4826      	ldr	r0, [pc, #152]	; (8004cf0 <_svfiprintf_r+0x1f0>)
 8004c58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c5c:	2206      	movs	r2, #6
 8004c5e:	f7fb fabf 	bl	80001e0 <memchr>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d038      	beq.n	8004cd8 <_svfiprintf_r+0x1d8>
 8004c66:	4b23      	ldr	r3, [pc, #140]	; (8004cf4 <_svfiprintf_r+0x1f4>)
 8004c68:	bb1b      	cbnz	r3, 8004cb2 <_svfiprintf_r+0x1b2>
 8004c6a:	9b03      	ldr	r3, [sp, #12]
 8004c6c:	3307      	adds	r3, #7
 8004c6e:	f023 0307 	bic.w	r3, r3, #7
 8004c72:	3308      	adds	r3, #8
 8004c74:	9303      	str	r3, [sp, #12]
 8004c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c78:	4433      	add	r3, r6
 8004c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c7c:	e767      	b.n	8004b4e <_svfiprintf_r+0x4e>
 8004c7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c82:	460c      	mov	r4, r1
 8004c84:	2001      	movs	r0, #1
 8004c86:	e7a5      	b.n	8004bd4 <_svfiprintf_r+0xd4>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	3401      	adds	r4, #1
 8004c8c:	9305      	str	r3, [sp, #20]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	f04f 0c0a 	mov.w	ip, #10
 8004c94:	4620      	mov	r0, r4
 8004c96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c9a:	3a30      	subs	r2, #48	; 0x30
 8004c9c:	2a09      	cmp	r2, #9
 8004c9e:	d903      	bls.n	8004ca8 <_svfiprintf_r+0x1a8>
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0c5      	beq.n	8004c30 <_svfiprintf_r+0x130>
 8004ca4:	9105      	str	r1, [sp, #20]
 8004ca6:	e7c3      	b.n	8004c30 <_svfiprintf_r+0x130>
 8004ca8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cac:	4604      	mov	r4, r0
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e7f0      	b.n	8004c94 <_svfiprintf_r+0x194>
 8004cb2:	ab03      	add	r3, sp, #12
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	462a      	mov	r2, r5
 8004cb8:	4b0f      	ldr	r3, [pc, #60]	; (8004cf8 <_svfiprintf_r+0x1f8>)
 8004cba:	a904      	add	r1, sp, #16
 8004cbc:	4638      	mov	r0, r7
 8004cbe:	f3af 8000 	nop.w
 8004cc2:	1c42      	adds	r2, r0, #1
 8004cc4:	4606      	mov	r6, r0
 8004cc6:	d1d6      	bne.n	8004c76 <_svfiprintf_r+0x176>
 8004cc8:	89ab      	ldrh	r3, [r5, #12]
 8004cca:	065b      	lsls	r3, r3, #25
 8004ccc:	f53f af2c 	bmi.w	8004b28 <_svfiprintf_r+0x28>
 8004cd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cd2:	b01d      	add	sp, #116	; 0x74
 8004cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd8:	ab03      	add	r3, sp, #12
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	462a      	mov	r2, r5
 8004cde:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <_svfiprintf_r+0x1f8>)
 8004ce0:	a904      	add	r1, sp, #16
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	f000 f87a 	bl	8004ddc <_printf_i>
 8004ce8:	e7eb      	b.n	8004cc2 <_svfiprintf_r+0x1c2>
 8004cea:	bf00      	nop
 8004cec:	08007abc 	.word	0x08007abc
 8004cf0:	08007ac6 	.word	0x08007ac6
 8004cf4:	00000000 	.word	0x00000000
 8004cf8:	08004a4b 	.word	0x08004a4b
 8004cfc:	08007ac2 	.word	0x08007ac2

08004d00 <_printf_common>:
 8004d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d04:	4616      	mov	r6, r2
 8004d06:	4699      	mov	r9, r3
 8004d08:	688a      	ldr	r2, [r1, #8]
 8004d0a:	690b      	ldr	r3, [r1, #16]
 8004d0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d10:	4293      	cmp	r3, r2
 8004d12:	bfb8      	it	lt
 8004d14:	4613      	movlt	r3, r2
 8004d16:	6033      	str	r3, [r6, #0]
 8004d18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d1c:	4607      	mov	r7, r0
 8004d1e:	460c      	mov	r4, r1
 8004d20:	b10a      	cbz	r2, 8004d26 <_printf_common+0x26>
 8004d22:	3301      	adds	r3, #1
 8004d24:	6033      	str	r3, [r6, #0]
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	0699      	lsls	r1, r3, #26
 8004d2a:	bf42      	ittt	mi
 8004d2c:	6833      	ldrmi	r3, [r6, #0]
 8004d2e:	3302      	addmi	r3, #2
 8004d30:	6033      	strmi	r3, [r6, #0]
 8004d32:	6825      	ldr	r5, [r4, #0]
 8004d34:	f015 0506 	ands.w	r5, r5, #6
 8004d38:	d106      	bne.n	8004d48 <_printf_common+0x48>
 8004d3a:	f104 0a19 	add.w	sl, r4, #25
 8004d3e:	68e3      	ldr	r3, [r4, #12]
 8004d40:	6832      	ldr	r2, [r6, #0]
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	42ab      	cmp	r3, r5
 8004d46:	dc26      	bgt.n	8004d96 <_printf_common+0x96>
 8004d48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d4c:	1e13      	subs	r3, r2, #0
 8004d4e:	6822      	ldr	r2, [r4, #0]
 8004d50:	bf18      	it	ne
 8004d52:	2301      	movne	r3, #1
 8004d54:	0692      	lsls	r2, r2, #26
 8004d56:	d42b      	bmi.n	8004db0 <_printf_common+0xb0>
 8004d58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d5c:	4649      	mov	r1, r9
 8004d5e:	4638      	mov	r0, r7
 8004d60:	47c0      	blx	r8
 8004d62:	3001      	adds	r0, #1
 8004d64:	d01e      	beq.n	8004da4 <_printf_common+0xa4>
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	68e5      	ldr	r5, [r4, #12]
 8004d6a:	6832      	ldr	r2, [r6, #0]
 8004d6c:	f003 0306 	and.w	r3, r3, #6
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	bf08      	it	eq
 8004d74:	1aad      	subeq	r5, r5, r2
 8004d76:	68a3      	ldr	r3, [r4, #8]
 8004d78:	6922      	ldr	r2, [r4, #16]
 8004d7a:	bf0c      	ite	eq
 8004d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d80:	2500      	movne	r5, #0
 8004d82:	4293      	cmp	r3, r2
 8004d84:	bfc4      	itt	gt
 8004d86:	1a9b      	subgt	r3, r3, r2
 8004d88:	18ed      	addgt	r5, r5, r3
 8004d8a:	2600      	movs	r6, #0
 8004d8c:	341a      	adds	r4, #26
 8004d8e:	42b5      	cmp	r5, r6
 8004d90:	d11a      	bne.n	8004dc8 <_printf_common+0xc8>
 8004d92:	2000      	movs	r0, #0
 8004d94:	e008      	b.n	8004da8 <_printf_common+0xa8>
 8004d96:	2301      	movs	r3, #1
 8004d98:	4652      	mov	r2, sl
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	4638      	mov	r0, r7
 8004d9e:	47c0      	blx	r8
 8004da0:	3001      	adds	r0, #1
 8004da2:	d103      	bne.n	8004dac <_printf_common+0xac>
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295
 8004da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dac:	3501      	adds	r5, #1
 8004dae:	e7c6      	b.n	8004d3e <_printf_common+0x3e>
 8004db0:	18e1      	adds	r1, r4, r3
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	2030      	movs	r0, #48	; 0x30
 8004db6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dba:	4422      	add	r2, r4
 8004dbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dc4:	3302      	adds	r3, #2
 8004dc6:	e7c7      	b.n	8004d58 <_printf_common+0x58>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	4622      	mov	r2, r4
 8004dcc:	4649      	mov	r1, r9
 8004dce:	4638      	mov	r0, r7
 8004dd0:	47c0      	blx	r8
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	d0e6      	beq.n	8004da4 <_printf_common+0xa4>
 8004dd6:	3601      	adds	r6, #1
 8004dd8:	e7d9      	b.n	8004d8e <_printf_common+0x8e>
	...

08004ddc <_printf_i>:
 8004ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004de0:	460c      	mov	r4, r1
 8004de2:	4691      	mov	r9, r2
 8004de4:	7e27      	ldrb	r7, [r4, #24]
 8004de6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004de8:	2f78      	cmp	r7, #120	; 0x78
 8004dea:	4680      	mov	r8, r0
 8004dec:	469a      	mov	sl, r3
 8004dee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004df2:	d807      	bhi.n	8004e04 <_printf_i+0x28>
 8004df4:	2f62      	cmp	r7, #98	; 0x62
 8004df6:	d80a      	bhi.n	8004e0e <_printf_i+0x32>
 8004df8:	2f00      	cmp	r7, #0
 8004dfa:	f000 80d8 	beq.w	8004fae <_printf_i+0x1d2>
 8004dfe:	2f58      	cmp	r7, #88	; 0x58
 8004e00:	f000 80a3 	beq.w	8004f4a <_printf_i+0x16e>
 8004e04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e0c:	e03a      	b.n	8004e84 <_printf_i+0xa8>
 8004e0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e12:	2b15      	cmp	r3, #21
 8004e14:	d8f6      	bhi.n	8004e04 <_printf_i+0x28>
 8004e16:	a001      	add	r0, pc, #4	; (adr r0, 8004e1c <_printf_i+0x40>)
 8004e18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e1c:	08004e75 	.word	0x08004e75
 8004e20:	08004e89 	.word	0x08004e89
 8004e24:	08004e05 	.word	0x08004e05
 8004e28:	08004e05 	.word	0x08004e05
 8004e2c:	08004e05 	.word	0x08004e05
 8004e30:	08004e05 	.word	0x08004e05
 8004e34:	08004e89 	.word	0x08004e89
 8004e38:	08004e05 	.word	0x08004e05
 8004e3c:	08004e05 	.word	0x08004e05
 8004e40:	08004e05 	.word	0x08004e05
 8004e44:	08004e05 	.word	0x08004e05
 8004e48:	08004f95 	.word	0x08004f95
 8004e4c:	08004eb9 	.word	0x08004eb9
 8004e50:	08004f77 	.word	0x08004f77
 8004e54:	08004e05 	.word	0x08004e05
 8004e58:	08004e05 	.word	0x08004e05
 8004e5c:	08004fb7 	.word	0x08004fb7
 8004e60:	08004e05 	.word	0x08004e05
 8004e64:	08004eb9 	.word	0x08004eb9
 8004e68:	08004e05 	.word	0x08004e05
 8004e6c:	08004e05 	.word	0x08004e05
 8004e70:	08004f7f 	.word	0x08004f7f
 8004e74:	680b      	ldr	r3, [r1, #0]
 8004e76:	1d1a      	adds	r2, r3, #4
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	600a      	str	r2, [r1, #0]
 8004e7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e84:	2301      	movs	r3, #1
 8004e86:	e0a3      	b.n	8004fd0 <_printf_i+0x1f4>
 8004e88:	6825      	ldr	r5, [r4, #0]
 8004e8a:	6808      	ldr	r0, [r1, #0]
 8004e8c:	062e      	lsls	r6, r5, #24
 8004e8e:	f100 0304 	add.w	r3, r0, #4
 8004e92:	d50a      	bpl.n	8004eaa <_printf_i+0xce>
 8004e94:	6805      	ldr	r5, [r0, #0]
 8004e96:	600b      	str	r3, [r1, #0]
 8004e98:	2d00      	cmp	r5, #0
 8004e9a:	da03      	bge.n	8004ea4 <_printf_i+0xc8>
 8004e9c:	232d      	movs	r3, #45	; 0x2d
 8004e9e:	426d      	negs	r5, r5
 8004ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea4:	485e      	ldr	r0, [pc, #376]	; (8005020 <_printf_i+0x244>)
 8004ea6:	230a      	movs	r3, #10
 8004ea8:	e019      	b.n	8004ede <_printf_i+0x102>
 8004eaa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004eae:	6805      	ldr	r5, [r0, #0]
 8004eb0:	600b      	str	r3, [r1, #0]
 8004eb2:	bf18      	it	ne
 8004eb4:	b22d      	sxthne	r5, r5
 8004eb6:	e7ef      	b.n	8004e98 <_printf_i+0xbc>
 8004eb8:	680b      	ldr	r3, [r1, #0]
 8004eba:	6825      	ldr	r5, [r4, #0]
 8004ebc:	1d18      	adds	r0, r3, #4
 8004ebe:	6008      	str	r0, [r1, #0]
 8004ec0:	0628      	lsls	r0, r5, #24
 8004ec2:	d501      	bpl.n	8004ec8 <_printf_i+0xec>
 8004ec4:	681d      	ldr	r5, [r3, #0]
 8004ec6:	e002      	b.n	8004ece <_printf_i+0xf2>
 8004ec8:	0669      	lsls	r1, r5, #25
 8004eca:	d5fb      	bpl.n	8004ec4 <_printf_i+0xe8>
 8004ecc:	881d      	ldrh	r5, [r3, #0]
 8004ece:	4854      	ldr	r0, [pc, #336]	; (8005020 <_printf_i+0x244>)
 8004ed0:	2f6f      	cmp	r7, #111	; 0x6f
 8004ed2:	bf0c      	ite	eq
 8004ed4:	2308      	moveq	r3, #8
 8004ed6:	230a      	movne	r3, #10
 8004ed8:	2100      	movs	r1, #0
 8004eda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ede:	6866      	ldr	r6, [r4, #4]
 8004ee0:	60a6      	str	r6, [r4, #8]
 8004ee2:	2e00      	cmp	r6, #0
 8004ee4:	bfa2      	ittt	ge
 8004ee6:	6821      	ldrge	r1, [r4, #0]
 8004ee8:	f021 0104 	bicge.w	r1, r1, #4
 8004eec:	6021      	strge	r1, [r4, #0]
 8004eee:	b90d      	cbnz	r5, 8004ef4 <_printf_i+0x118>
 8004ef0:	2e00      	cmp	r6, #0
 8004ef2:	d04d      	beq.n	8004f90 <_printf_i+0x1b4>
 8004ef4:	4616      	mov	r6, r2
 8004ef6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004efa:	fb03 5711 	mls	r7, r3, r1, r5
 8004efe:	5dc7      	ldrb	r7, [r0, r7]
 8004f00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f04:	462f      	mov	r7, r5
 8004f06:	42bb      	cmp	r3, r7
 8004f08:	460d      	mov	r5, r1
 8004f0a:	d9f4      	bls.n	8004ef6 <_printf_i+0x11a>
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d10b      	bne.n	8004f28 <_printf_i+0x14c>
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	07df      	lsls	r7, r3, #31
 8004f14:	d508      	bpl.n	8004f28 <_printf_i+0x14c>
 8004f16:	6923      	ldr	r3, [r4, #16]
 8004f18:	6861      	ldr	r1, [r4, #4]
 8004f1a:	4299      	cmp	r1, r3
 8004f1c:	bfde      	ittt	le
 8004f1e:	2330      	movle	r3, #48	; 0x30
 8004f20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f28:	1b92      	subs	r2, r2, r6
 8004f2a:	6122      	str	r2, [r4, #16]
 8004f2c:	f8cd a000 	str.w	sl, [sp]
 8004f30:	464b      	mov	r3, r9
 8004f32:	aa03      	add	r2, sp, #12
 8004f34:	4621      	mov	r1, r4
 8004f36:	4640      	mov	r0, r8
 8004f38:	f7ff fee2 	bl	8004d00 <_printf_common>
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	d14c      	bne.n	8004fda <_printf_i+0x1fe>
 8004f40:	f04f 30ff 	mov.w	r0, #4294967295
 8004f44:	b004      	add	sp, #16
 8004f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f4a:	4835      	ldr	r0, [pc, #212]	; (8005020 <_printf_i+0x244>)
 8004f4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	680e      	ldr	r6, [r1, #0]
 8004f54:	061f      	lsls	r7, r3, #24
 8004f56:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f5a:	600e      	str	r6, [r1, #0]
 8004f5c:	d514      	bpl.n	8004f88 <_printf_i+0x1ac>
 8004f5e:	07d9      	lsls	r1, r3, #31
 8004f60:	bf44      	itt	mi
 8004f62:	f043 0320 	orrmi.w	r3, r3, #32
 8004f66:	6023      	strmi	r3, [r4, #0]
 8004f68:	b91d      	cbnz	r5, 8004f72 <_printf_i+0x196>
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	f023 0320 	bic.w	r3, r3, #32
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	2310      	movs	r3, #16
 8004f74:	e7b0      	b.n	8004ed8 <_printf_i+0xfc>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	f043 0320 	orr.w	r3, r3, #32
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	2378      	movs	r3, #120	; 0x78
 8004f80:	4828      	ldr	r0, [pc, #160]	; (8005024 <_printf_i+0x248>)
 8004f82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f86:	e7e3      	b.n	8004f50 <_printf_i+0x174>
 8004f88:	065e      	lsls	r6, r3, #25
 8004f8a:	bf48      	it	mi
 8004f8c:	b2ad      	uxthmi	r5, r5
 8004f8e:	e7e6      	b.n	8004f5e <_printf_i+0x182>
 8004f90:	4616      	mov	r6, r2
 8004f92:	e7bb      	b.n	8004f0c <_printf_i+0x130>
 8004f94:	680b      	ldr	r3, [r1, #0]
 8004f96:	6826      	ldr	r6, [r4, #0]
 8004f98:	6960      	ldr	r0, [r4, #20]
 8004f9a:	1d1d      	adds	r5, r3, #4
 8004f9c:	600d      	str	r5, [r1, #0]
 8004f9e:	0635      	lsls	r5, r6, #24
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	d501      	bpl.n	8004fa8 <_printf_i+0x1cc>
 8004fa4:	6018      	str	r0, [r3, #0]
 8004fa6:	e002      	b.n	8004fae <_printf_i+0x1d2>
 8004fa8:	0671      	lsls	r1, r6, #25
 8004faa:	d5fb      	bpl.n	8004fa4 <_printf_i+0x1c8>
 8004fac:	8018      	strh	r0, [r3, #0]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	6123      	str	r3, [r4, #16]
 8004fb2:	4616      	mov	r6, r2
 8004fb4:	e7ba      	b.n	8004f2c <_printf_i+0x150>
 8004fb6:	680b      	ldr	r3, [r1, #0]
 8004fb8:	1d1a      	adds	r2, r3, #4
 8004fba:	600a      	str	r2, [r1, #0]
 8004fbc:	681e      	ldr	r6, [r3, #0]
 8004fbe:	6862      	ldr	r2, [r4, #4]
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	f7fb f90c 	bl	80001e0 <memchr>
 8004fc8:	b108      	cbz	r0, 8004fce <_printf_i+0x1f2>
 8004fca:	1b80      	subs	r0, r0, r6
 8004fcc:	6060      	str	r0, [r4, #4]
 8004fce:	6863      	ldr	r3, [r4, #4]
 8004fd0:	6123      	str	r3, [r4, #16]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fd8:	e7a8      	b.n	8004f2c <_printf_i+0x150>
 8004fda:	6923      	ldr	r3, [r4, #16]
 8004fdc:	4632      	mov	r2, r6
 8004fde:	4649      	mov	r1, r9
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	47d0      	blx	sl
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d0ab      	beq.n	8004f40 <_printf_i+0x164>
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	079b      	lsls	r3, r3, #30
 8004fec:	d413      	bmi.n	8005016 <_printf_i+0x23a>
 8004fee:	68e0      	ldr	r0, [r4, #12]
 8004ff0:	9b03      	ldr	r3, [sp, #12]
 8004ff2:	4298      	cmp	r0, r3
 8004ff4:	bfb8      	it	lt
 8004ff6:	4618      	movlt	r0, r3
 8004ff8:	e7a4      	b.n	8004f44 <_printf_i+0x168>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	4632      	mov	r2, r6
 8004ffe:	4649      	mov	r1, r9
 8005000:	4640      	mov	r0, r8
 8005002:	47d0      	blx	sl
 8005004:	3001      	adds	r0, #1
 8005006:	d09b      	beq.n	8004f40 <_printf_i+0x164>
 8005008:	3501      	adds	r5, #1
 800500a:	68e3      	ldr	r3, [r4, #12]
 800500c:	9903      	ldr	r1, [sp, #12]
 800500e:	1a5b      	subs	r3, r3, r1
 8005010:	42ab      	cmp	r3, r5
 8005012:	dcf2      	bgt.n	8004ffa <_printf_i+0x21e>
 8005014:	e7eb      	b.n	8004fee <_printf_i+0x212>
 8005016:	2500      	movs	r5, #0
 8005018:	f104 0619 	add.w	r6, r4, #25
 800501c:	e7f5      	b.n	800500a <_printf_i+0x22e>
 800501e:	bf00      	nop
 8005020:	08007acd 	.word	0x08007acd
 8005024:	08007ade 	.word	0x08007ade

08005028 <memmove>:
 8005028:	4288      	cmp	r0, r1
 800502a:	b510      	push	{r4, lr}
 800502c:	eb01 0402 	add.w	r4, r1, r2
 8005030:	d902      	bls.n	8005038 <memmove+0x10>
 8005032:	4284      	cmp	r4, r0
 8005034:	4623      	mov	r3, r4
 8005036:	d807      	bhi.n	8005048 <memmove+0x20>
 8005038:	1e43      	subs	r3, r0, #1
 800503a:	42a1      	cmp	r1, r4
 800503c:	d008      	beq.n	8005050 <memmove+0x28>
 800503e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005042:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005046:	e7f8      	b.n	800503a <memmove+0x12>
 8005048:	4402      	add	r2, r0
 800504a:	4601      	mov	r1, r0
 800504c:	428a      	cmp	r2, r1
 800504e:	d100      	bne.n	8005052 <memmove+0x2a>
 8005050:	bd10      	pop	{r4, pc}
 8005052:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005056:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800505a:	e7f7      	b.n	800504c <memmove+0x24>

0800505c <_free_r>:
 800505c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800505e:	2900      	cmp	r1, #0
 8005060:	d048      	beq.n	80050f4 <_free_r+0x98>
 8005062:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005066:	9001      	str	r0, [sp, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	f1a1 0404 	sub.w	r4, r1, #4
 800506e:	bfb8      	it	lt
 8005070:	18e4      	addlt	r4, r4, r3
 8005072:	f000 f8d3 	bl	800521c <__malloc_lock>
 8005076:	4a20      	ldr	r2, [pc, #128]	; (80050f8 <_free_r+0x9c>)
 8005078:	9801      	ldr	r0, [sp, #4]
 800507a:	6813      	ldr	r3, [r2, #0]
 800507c:	4615      	mov	r5, r2
 800507e:	b933      	cbnz	r3, 800508e <_free_r+0x32>
 8005080:	6063      	str	r3, [r4, #4]
 8005082:	6014      	str	r4, [r2, #0]
 8005084:	b003      	add	sp, #12
 8005086:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800508a:	f000 b8cd 	b.w	8005228 <__malloc_unlock>
 800508e:	42a3      	cmp	r3, r4
 8005090:	d90b      	bls.n	80050aa <_free_r+0x4e>
 8005092:	6821      	ldr	r1, [r4, #0]
 8005094:	1862      	adds	r2, r4, r1
 8005096:	4293      	cmp	r3, r2
 8005098:	bf04      	itt	eq
 800509a:	681a      	ldreq	r2, [r3, #0]
 800509c:	685b      	ldreq	r3, [r3, #4]
 800509e:	6063      	str	r3, [r4, #4]
 80050a0:	bf04      	itt	eq
 80050a2:	1852      	addeq	r2, r2, r1
 80050a4:	6022      	streq	r2, [r4, #0]
 80050a6:	602c      	str	r4, [r5, #0]
 80050a8:	e7ec      	b.n	8005084 <_free_r+0x28>
 80050aa:	461a      	mov	r2, r3
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	b10b      	cbz	r3, 80050b4 <_free_r+0x58>
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	d9fa      	bls.n	80050aa <_free_r+0x4e>
 80050b4:	6811      	ldr	r1, [r2, #0]
 80050b6:	1855      	adds	r5, r2, r1
 80050b8:	42a5      	cmp	r5, r4
 80050ba:	d10b      	bne.n	80050d4 <_free_r+0x78>
 80050bc:	6824      	ldr	r4, [r4, #0]
 80050be:	4421      	add	r1, r4
 80050c0:	1854      	adds	r4, r2, r1
 80050c2:	42a3      	cmp	r3, r4
 80050c4:	6011      	str	r1, [r2, #0]
 80050c6:	d1dd      	bne.n	8005084 <_free_r+0x28>
 80050c8:	681c      	ldr	r4, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	6053      	str	r3, [r2, #4]
 80050ce:	4421      	add	r1, r4
 80050d0:	6011      	str	r1, [r2, #0]
 80050d2:	e7d7      	b.n	8005084 <_free_r+0x28>
 80050d4:	d902      	bls.n	80050dc <_free_r+0x80>
 80050d6:	230c      	movs	r3, #12
 80050d8:	6003      	str	r3, [r0, #0]
 80050da:	e7d3      	b.n	8005084 <_free_r+0x28>
 80050dc:	6825      	ldr	r5, [r4, #0]
 80050de:	1961      	adds	r1, r4, r5
 80050e0:	428b      	cmp	r3, r1
 80050e2:	bf04      	itt	eq
 80050e4:	6819      	ldreq	r1, [r3, #0]
 80050e6:	685b      	ldreq	r3, [r3, #4]
 80050e8:	6063      	str	r3, [r4, #4]
 80050ea:	bf04      	itt	eq
 80050ec:	1949      	addeq	r1, r1, r5
 80050ee:	6021      	streq	r1, [r4, #0]
 80050f0:	6054      	str	r4, [r2, #4]
 80050f2:	e7c7      	b.n	8005084 <_free_r+0x28>
 80050f4:	b003      	add	sp, #12
 80050f6:	bd30      	pop	{r4, r5, pc}
 80050f8:	200004c4 	.word	0x200004c4

080050fc <_malloc_r>:
 80050fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fe:	1ccd      	adds	r5, r1, #3
 8005100:	f025 0503 	bic.w	r5, r5, #3
 8005104:	3508      	adds	r5, #8
 8005106:	2d0c      	cmp	r5, #12
 8005108:	bf38      	it	cc
 800510a:	250c      	movcc	r5, #12
 800510c:	2d00      	cmp	r5, #0
 800510e:	4606      	mov	r6, r0
 8005110:	db01      	blt.n	8005116 <_malloc_r+0x1a>
 8005112:	42a9      	cmp	r1, r5
 8005114:	d903      	bls.n	800511e <_malloc_r+0x22>
 8005116:	230c      	movs	r3, #12
 8005118:	6033      	str	r3, [r6, #0]
 800511a:	2000      	movs	r0, #0
 800511c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800511e:	f000 f87d 	bl	800521c <__malloc_lock>
 8005122:	4921      	ldr	r1, [pc, #132]	; (80051a8 <_malloc_r+0xac>)
 8005124:	680a      	ldr	r2, [r1, #0]
 8005126:	4614      	mov	r4, r2
 8005128:	b99c      	cbnz	r4, 8005152 <_malloc_r+0x56>
 800512a:	4f20      	ldr	r7, [pc, #128]	; (80051ac <_malloc_r+0xb0>)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	b923      	cbnz	r3, 800513a <_malloc_r+0x3e>
 8005130:	4621      	mov	r1, r4
 8005132:	4630      	mov	r0, r6
 8005134:	f000 f862 	bl	80051fc <_sbrk_r>
 8005138:	6038      	str	r0, [r7, #0]
 800513a:	4629      	mov	r1, r5
 800513c:	4630      	mov	r0, r6
 800513e:	f000 f85d 	bl	80051fc <_sbrk_r>
 8005142:	1c43      	adds	r3, r0, #1
 8005144:	d123      	bne.n	800518e <_malloc_r+0x92>
 8005146:	230c      	movs	r3, #12
 8005148:	6033      	str	r3, [r6, #0]
 800514a:	4630      	mov	r0, r6
 800514c:	f000 f86c 	bl	8005228 <__malloc_unlock>
 8005150:	e7e3      	b.n	800511a <_malloc_r+0x1e>
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	1b5b      	subs	r3, r3, r5
 8005156:	d417      	bmi.n	8005188 <_malloc_r+0x8c>
 8005158:	2b0b      	cmp	r3, #11
 800515a:	d903      	bls.n	8005164 <_malloc_r+0x68>
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	441c      	add	r4, r3
 8005160:	6025      	str	r5, [r4, #0]
 8005162:	e004      	b.n	800516e <_malloc_r+0x72>
 8005164:	6863      	ldr	r3, [r4, #4]
 8005166:	42a2      	cmp	r2, r4
 8005168:	bf0c      	ite	eq
 800516a:	600b      	streq	r3, [r1, #0]
 800516c:	6053      	strne	r3, [r2, #4]
 800516e:	4630      	mov	r0, r6
 8005170:	f000 f85a 	bl	8005228 <__malloc_unlock>
 8005174:	f104 000b 	add.w	r0, r4, #11
 8005178:	1d23      	adds	r3, r4, #4
 800517a:	f020 0007 	bic.w	r0, r0, #7
 800517e:	1ac2      	subs	r2, r0, r3
 8005180:	d0cc      	beq.n	800511c <_malloc_r+0x20>
 8005182:	1a1b      	subs	r3, r3, r0
 8005184:	50a3      	str	r3, [r4, r2]
 8005186:	e7c9      	b.n	800511c <_malloc_r+0x20>
 8005188:	4622      	mov	r2, r4
 800518a:	6864      	ldr	r4, [r4, #4]
 800518c:	e7cc      	b.n	8005128 <_malloc_r+0x2c>
 800518e:	1cc4      	adds	r4, r0, #3
 8005190:	f024 0403 	bic.w	r4, r4, #3
 8005194:	42a0      	cmp	r0, r4
 8005196:	d0e3      	beq.n	8005160 <_malloc_r+0x64>
 8005198:	1a21      	subs	r1, r4, r0
 800519a:	4630      	mov	r0, r6
 800519c:	f000 f82e 	bl	80051fc <_sbrk_r>
 80051a0:	3001      	adds	r0, #1
 80051a2:	d1dd      	bne.n	8005160 <_malloc_r+0x64>
 80051a4:	e7cf      	b.n	8005146 <_malloc_r+0x4a>
 80051a6:	bf00      	nop
 80051a8:	200004c4 	.word	0x200004c4
 80051ac:	200004c8 	.word	0x200004c8

080051b0 <_realloc_r>:
 80051b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b2:	4607      	mov	r7, r0
 80051b4:	4614      	mov	r4, r2
 80051b6:	460e      	mov	r6, r1
 80051b8:	b921      	cbnz	r1, 80051c4 <_realloc_r+0x14>
 80051ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80051be:	4611      	mov	r1, r2
 80051c0:	f7ff bf9c 	b.w	80050fc <_malloc_r>
 80051c4:	b922      	cbnz	r2, 80051d0 <_realloc_r+0x20>
 80051c6:	f7ff ff49 	bl	800505c <_free_r>
 80051ca:	4625      	mov	r5, r4
 80051cc:	4628      	mov	r0, r5
 80051ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051d0:	f000 f830 	bl	8005234 <_malloc_usable_size_r>
 80051d4:	42a0      	cmp	r0, r4
 80051d6:	d20f      	bcs.n	80051f8 <_realloc_r+0x48>
 80051d8:	4621      	mov	r1, r4
 80051da:	4638      	mov	r0, r7
 80051dc:	f7ff ff8e 	bl	80050fc <_malloc_r>
 80051e0:	4605      	mov	r5, r0
 80051e2:	2800      	cmp	r0, #0
 80051e4:	d0f2      	beq.n	80051cc <_realloc_r+0x1c>
 80051e6:	4631      	mov	r1, r6
 80051e8:	4622      	mov	r2, r4
 80051ea:	f7ff fbe1 	bl	80049b0 <memcpy>
 80051ee:	4631      	mov	r1, r6
 80051f0:	4638      	mov	r0, r7
 80051f2:	f7ff ff33 	bl	800505c <_free_r>
 80051f6:	e7e9      	b.n	80051cc <_realloc_r+0x1c>
 80051f8:	4635      	mov	r5, r6
 80051fa:	e7e7      	b.n	80051cc <_realloc_r+0x1c>

080051fc <_sbrk_r>:
 80051fc:	b538      	push	{r3, r4, r5, lr}
 80051fe:	4d06      	ldr	r5, [pc, #24]	; (8005218 <_sbrk_r+0x1c>)
 8005200:	2300      	movs	r3, #0
 8005202:	4604      	mov	r4, r0
 8005204:	4608      	mov	r0, r1
 8005206:	602b      	str	r3, [r5, #0]
 8005208:	f7fc fae8 	bl	80017dc <_sbrk>
 800520c:	1c43      	adds	r3, r0, #1
 800520e:	d102      	bne.n	8005216 <_sbrk_r+0x1a>
 8005210:	682b      	ldr	r3, [r5, #0]
 8005212:	b103      	cbz	r3, 8005216 <_sbrk_r+0x1a>
 8005214:	6023      	str	r3, [r4, #0]
 8005216:	bd38      	pop	{r3, r4, r5, pc}
 8005218:	200006cc 	.word	0x200006cc

0800521c <__malloc_lock>:
 800521c:	4801      	ldr	r0, [pc, #4]	; (8005224 <__malloc_lock+0x8>)
 800521e:	f000 b811 	b.w	8005244 <__retarget_lock_acquire_recursive>
 8005222:	bf00      	nop
 8005224:	200006d4 	.word	0x200006d4

08005228 <__malloc_unlock>:
 8005228:	4801      	ldr	r0, [pc, #4]	; (8005230 <__malloc_unlock+0x8>)
 800522a:	f000 b80c 	b.w	8005246 <__retarget_lock_release_recursive>
 800522e:	bf00      	nop
 8005230:	200006d4 	.word	0x200006d4

08005234 <_malloc_usable_size_r>:
 8005234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005238:	1f18      	subs	r0, r3, #4
 800523a:	2b00      	cmp	r3, #0
 800523c:	bfbc      	itt	lt
 800523e:	580b      	ldrlt	r3, [r1, r0]
 8005240:	18c0      	addlt	r0, r0, r3
 8005242:	4770      	bx	lr

08005244 <__retarget_lock_acquire_recursive>:
 8005244:	4770      	bx	lr

08005246 <__retarget_lock_release_recursive>:
 8005246:	4770      	bx	lr

08005248 <_init>:
 8005248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524a:	bf00      	nop
 800524c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524e:	bc08      	pop	{r3}
 8005250:	469e      	mov	lr, r3
 8005252:	4770      	bx	lr

08005254 <_fini>:
 8005254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005256:	bf00      	nop
 8005258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525a:	bc08      	pop	{r3}
 800525c:	469e      	mov	lr, r3
 800525e:	4770      	bx	lr
